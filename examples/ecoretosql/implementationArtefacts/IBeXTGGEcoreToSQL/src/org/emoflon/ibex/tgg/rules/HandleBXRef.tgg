#using IBeXTGGEcoreToSQL.*
#using AttrCondDefLibrary.*

#rule HandleBXRef #with IBeXTGGEcoreToSQL

#source { 
	from:EClass
	
	++ ref_f:EReference {
		containment := false
		++ -eContainingClass->from
		++ -eType->to
		++ -eOpposite->ref_b
	}
	
	++ ref_b:EReference {
		containment := false
		++ -eContainingClass->to
		++ -eType->from
		++ -eOpposite->ref_f
	}
	
	to:EClass
}

#target {
	s:Schema {
		-ownedTables->fromT
		-ownedTables->toT
		++-ownedTables->refT
	}
	
	fromT:Table 
	
	++ refT:Table {
		++-ownedColumns->source
		++-ownedColumns->target
		++-ownedForeignKeys->fk_source
		++-ownedForeignKeys->fk_target
	}
	
	++ fk_source:ForeignKey {
		++-column->source
		++-referencedTable->fromT
	}
	
	++ fk_target:ForeignKey {
		++-column->target
		++-referencedTable->refT
	}
	
	++ source:Column {
		name := "source"
	}
	
	++ target:Column {
		name := "target"
	} 
	
	toT:Table	
}

#correspondence {
	f2f:ClassToTable {
		#src->from
		#trg->fromT
	}
	
	t2t:ClassToTable {
		#src->to
		#trg->toT		
	}
}

#attributeConditions {
	concat("_inverse_", f, b, refT.name)
	concat("_", from.name, ref_f.name, f)
	concat("_", to.name, ref_b.name, b)
}
