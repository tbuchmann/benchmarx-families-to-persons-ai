%%% Generated on: 2023-03-11T12:17:54.216583
% ../metamodels/Persons/model/Persons.ecore : f93a7b2581311d96e9aad294a7f901a9
% ../metamodels/Families/model/Families.ecore : d95e6279b4f112e085dc6e6dd346b5bb
% results/jtl/persons34.xmi : ee60213f9901b3cd67592fdb4008fd41
% ../implementationArtefacts/jtl/Families2Persons.dl : 273cf2585d4f1f93bd29284e7de7dcc9
%%%-

%%% SOURCE METAMODEL %%%
metamodel(x_Persons).
metanode(x_Persons,x_PersonRegister).
metanode(x_Persons,x_Person).
metanode(x_Persons,x_Male).
metanode(x_Persons,x_Female).
metaprop(x_Persons,x_name,x_Person).
metaprop(x_Persons,x_birthday,x_Person).
metaprop(x_Persons,x_name,x_Male).
metaprop(x_Persons,x_birthday,x_Male).
metaprop(x_Persons,x_name,x_Female).
metaprop(x_Persons,x_birthday,x_Female).
metaedge(x_Persons,composition,x_persons,x_PersonRegister,x_Person).
metaedge(x_Persons,composition,x_persons,x_PersonRegister,x_Male).
metaedge(x_Persons,composition,x_persons,x_PersonRegister,x_Female).
metaedge(x_Persons,association,x_personsInverse,x_Person,x_PersonRegister).
metaedge(x_Persons,association,x_personsInverse,x_Male,x_PersonRegister).
metaedge(x_Persons,generalization,x_general,x_Male,x_Person).
metaedge(x_Persons,association,x_personsInverse,x_Female,x_PersonRegister).
metaedge(x_Persons,generalization,x_general,x_Female,x_Person).

%%% TARGET METAMODEL %%%
metamodel(x_Families).
metanode(x_Families,x_FamilyRegister).
metanode(x_Families,x_Family).
metanode(x_Families,x_FamilyMember).
metaprop(x_Families,x_name,x_Family).
metaprop(x_Families,x_name,x_FamilyMember).
metaedge(x_Families,composition,x_families,x_FamilyRegister,x_Family).
metaedge(x_Families,composition,x_father,x_Family,x_FamilyMember).
metaedge(x_Families,composition,x_mother,x_Family,x_FamilyMember).
metaedge(x_Families,composition,x_sons,x_Family,x_FamilyMember).
metaedge(x_Families,composition,x_daughters,x_Family,x_FamilyMember).
metaedge(x_Families,association,x_familiesInverse,x_Family,x_FamilyRegister).
metaedge(x_Families,association,x_fatherInverse,x_FamilyMember,x_Family).
metaedge(x_Families,association,x_motherInverse,x_FamilyMember,x_Family).
metaedge(x_Families,association,x_sonsInverse,x_FamilyMember,x_Family).
metaedge(x_Families,association,x_daughtersInverse,x_FamilyMember,x_Family).

%%% SOURCE MODEL %%%
model("x_m1",x_Persons).
node(x_Persons,1,"x_/",x_PersonRegister).
node(x_Persons,2,"x_//@persons.0",x_Male).
node(x_Persons,3,"x_//@persons.1",x_Male).
node(x_Persons,4,"x_//@persons.2",x_Female).
prop(x_Persons,2010,"x_//@persons.0209",2,"x_//@persons.0",x_name, x_list(["x_Flanders","x_Rod"]) ).
prop(x_Persons,3014,"x_//@persons.13013",3,"x_//@persons.1",x_name, x_list(["x_Simpson","x_Homer"]) ).
prop(x_Persons,4018,"x_//@persons.24017",4,"x_//@persons.2",x_name, x_list(["x_Simpson","x_Marge"]) ).
edge(x_Persons,102,"x_/101",x_persons,1,"x_/",2,"x_//@persons.0").
edge(x_Persons,104,"x_/103",x_persons,1,"x_/",3,"x_//@persons.1").
edge(x_Persons,106,"x_/105",x_persons,1,"x_/",4,"x_//@persons.2").
edge(x_Persons,208,"x_//@persons.0207",x_personsInverse,2,"x_//@persons.0",1,"x_/").
edge(x_Persons,3012,"x_//@persons.13011",x_personsInverse,3,"x_//@persons.1",1,"x_/").
edge(x_Persons,4016,"x_//@persons.24015",x_personsInverse,4,"x_//@persons.2",1,"x_/").

:- node(x_Persons, IDt, IDtx, x_Male), not trace_node(x_Families, IDt, IDtx, x_FamilyMember),
nodex(x_Families, IDt+111, IDtx, x_Family), edgex(x_Families, IDe, IDex, x_sons, IDt+111, IDtx, IDt, IDtx),
nodex(x_Families, IDt, IDtx, x_FamilyMember). 

:- node(x_Persons, IDt, IDtx, x_Female), not trace_node(x_Families, IDt, IDtx, x_FamilyMember),
nodex(x_Families, IDt+111, IDtx, x_Family), edgex(x_Families, IDe, IDex, x_daughters, IDt+111, IDtx, IDt, IDtx),
nodex(x_Families, IDt, IDtx, x_FamilyMember). 

:- node(x_Persons, IDt, IDtx, x_Male), not trace_node(x_Families, IDt, IDtx, x_FamilyMember),
nodex(x_Families, IDft, IDftx, x_Family), edgex(x_Families, IDe, IDex, x_sons, IDft, IDftx, IDt, IDtx),
nodex(x_Families, IDt, IDtx, x_FamilyMember),
not there_is_a_father_in_family(IDft,IDftx).
there_is_a_father_in_family(IDf,IDfx) :- edgex(x_Families, IDe2, IDe2x, x_father, IDf, IDfx, ID, IDx), nodex(x_Families, ID, IDx, x_FamilyMember).

:- node(x_Persons, IDt, IDtx, x_Female), not trace_node(x_Families, IDt, IDtx, x_FamilyMember),
nodex(x_Families, IDft, IDftx, x_Family), edgex(x_Families, IDe, IDex, x_daughters, IDft, IDftx, IDt, IDtx),
nodex(x_Families, IDt, IDtx, x_FamilyMember),
not there_is_a_mother_in_family(IDft,IDftx).
there_is_a_mother_in_family(IDf,IDfx) :- edgex(x_Families, IDe2, IDe2x, x_mother, IDf, IDfx, ID, IDx), nodex(x_Families, ID, IDx, x_FamilyMember).

:- node(x_Persons, IDt, IDtx, x_Male), not trace_node(x_Families, IDt, IDtx, x_FamilyMember),
prop(x_Persons, IDpt, IDptx, IDt, IDtx, x_name, x_list([SN,N])),
nodex(x_Families, IDt+111, IDtx, x_Family), propx(x_Families, IDt, IDtx, IDt+111, IDtx, x_name, SN),
nodex(x_Families, IDt, IDtx, x_FamilyMember). 

:- node(x_Persons, IDt, IDtx, x_Female), not trace_node(x_Families, IDt, IDtx, x_FamilyMember),
prop(x_Persons, IDpt, IDptx, IDt, IDtx, x_name, x_list([SN,N])),
nodex(x_Families, IDt+111, IDtx, x_Family), propx(x_Families, IDt, IDtx, IDt+111, IDtx, x_name, SN),
nodex(x_Families, IDt, IDtx, x_FamilyMember). 

:- node(x_Persons, IDt, IDtx, x_Male), not trace_node(x_Families, IDt, IDtx, x_FamilyMember), prop(x_Persons, IDtp, IDtpx, IDt, IDtx, x_name, x_list([SN,N])),
nodex(x_Families, IDf1, IDf1x, x_Family), propx(x_Families, IDf1p, IDf1px, IDf1, IDf1x, x_name, SN),
nodex(x_Families, IDf2, IDf2x, x_Family), propx(x_Families, IDf2p, IDf2px, IDf2, IDf2x, x_name, SN),
IDf1 != IDf2.

:- node(x_Persons, IDt, IDtx, x_Female), not trace_node(x_Families, IDt, IDtx, x_FamilyMember), prop(x_Persons, IDtp, IDtpx, IDt, IDtx, x_name, x_list([SN,N])),
nodex(x_Families, IDf1, IDf1x, x_Family), propx(x_Families, IDf1p, IDf1px, IDf1, IDf1x, x_name, SN),
nodex(x_Families, IDf2, IDf2x, x_Family), propx(x_Families, IDf2p, IDf2px, IDf2, IDf2x, x_name, SN),
IDf1 != IDf2.

:- node(x_Persons, ID, IDx, x_Male), prop(x_Persons, IDp, IDpx, ID, IDx, x_name, x_list([SN,N])),
nodex(x_Families, ID, IDx, x_FamilyMember), not is_family_with_name(SN),
not nodex(x_Families, ID+111, IDx, x_Family).
:- node(x_Persons, ID, IDx, x_Female), prop(x_Persons, IDp, IDpx, ID, IDx, x_name, x_list([SN,N])),
nodex(x_Families, ID, IDx, x_FamilyMember), not is_family_with_name(SN),
not nodex(x_Families, ID+111, IDx, x_Family).
is_family_with_name(SN) :-  nodex(x_Families, ID, IDx, x_Family), propx(x_Families, IDp, IDpx, ID, IDx, x_name, SN).

%%% TRANSFORMATION %%%
#const mmt = x_Families.



%%% RELATIONS %%%
relation_node("FamilyRegister2PersonRegister", x_Families, x_FamilyRegister, 0).
relation_node("FamilyRegister2PersonRegister", x_Persons, x_PersonRegister, 0).
relation_node("FamilyMember2Male", x_Families, x_FamilyMember, 0).
relation_node("FamilyMember2Male", x_Persons, x_Male, 0).
relation_prop("FamilyMember2Male_name2name", x_Families, x_name, x_FamilyMember, 0).
relation_prop("FamilyMember2Male_name2name", x_Persons, x_name, x_Male, 0).
relation_node("FamilyMember2Female", x_Families, x_FamilyMember, 0).
relation_node("FamilyMember2Female", x_Persons, x_Female, 0).
relation_prop("FamilyMember2Female_name2name", x_Families, x_name, x_FamilyMember, 0).
relation_prop("FamilyMember2Female_name2name", x_Persons, x_name, x_Female, 0).
%%% MM CONSTRAINTS %%%
:- nodex(x_Families, IDf, IDfx, x_Family), nodex(x_Families, ID1, ID1x, x_FamilyMember), nodex(x_Families, ID2, ID2x, x_FamilyMember), 
edgex(x_Families, IDe, IDex, x_father, IDf, IDfx, ID1, ID1x), edgex(x_Families, IDe2, IDex2, x_father, IDf, IDfx, ID2, ID2x), ID1!=ID2, ID1x!=ID2x.
:- nodex(x_Families, IDf, IDfx, x_Family), nodex(x_Families, ID1, ID1x, x_FamilyMember), nodex(x_Families, ID2, ID2x, x_FamilyMember), 
edgex(x_Families, IDe, IDex, x_mother, IDf, IDfx, ID1, ID1x), edgex(x_Families, IDe2, IDe2x, x_mother, IDf, IDfx, ID2, ID2x), ID1!=ID2, ID1x!=ID2x.
%EXTRA CONSTRAINTS
:- not edgex(MM,ID+111,IDx,Edge,IDF,IDFx,IDM,IDMx), trace_nb_edge(MM,ID,IDx,Edge,IDF,IDFx,IDM,IDMx).

%%% MAPPING %%%

%%% FamilyRegister2PersonRegister %%%

% mapping node FamilyRegister2PersonRegister:FamilyRegister -> PersonRegister
mapping_node(x_Persons, ID, IDx, x_PersonRegister) :- node(x_Families, ID, IDx, x_FamilyRegister), mmt=x_Persons.
:- node(x_Families, ID, IDx, x_FamilyRegister), not nodex(x_Persons, ID, IDx, x_PersonRegister), mmt=x_Persons.

% mapping node FamilyRegister2PersonRegister:PersonRegister -> FamilyRegister
mapping_node(x_Families, ID, IDx, x_FamilyRegister) :- node(x_Persons, ID, IDx, x_PersonRegister), mmt=x_Families.
:- node(x_Persons, ID, IDx, x_PersonRegister), not nodex(x_Families, ID, IDx, x_FamilyRegister), mmt=x_Families.

% mapping_edge FamilyRegister2PersonRegister: persons-male -> families 
mapping_edge(x_Families, IDe+111, IDex, x_families, IDs, IDsx, IDt+111, IDtx) :- 
nodex(x_Families, IDs, IDsx, x_FamilyRegister), 
nodex(x_Families, IDt+111, IDtx, x_Family), 
node(x_Persons, IDs, IDsx, x_PersonRegister), 
edge(x_Persons, IDe, IDex, x_persons, IDs, IDsx, IDt, IDtx), 
node(x_Persons, IDt, IDtx, x_Male), mmt=x_Families.
:- not edgex(x_Families, IDe+111, IDex, x_families, IDs, IDsx, IDt+111, IDtx),
nodex(x_Families, IDs, IDsx, x_FamilyRegister), 
nodex(x_Families, IDt+111, IDtx, x_Family), 
node(x_Persons, IDs, IDsx, x_PersonRegister), 
edge(x_Persons, IDe, IDex, x_persons, IDs, IDsx, IDt, IDtx), 
node(x_Persons, IDt, IDtx, x_Male), mmt=x_Families.

% mapping_edge FamilyRegister2PersonRegister: persons-female -> families
mapping_edge(x_Families, IDe+111, IDex, x_families, IDs, IDsx, IDt+111, IDtx) :- 
nodex(x_Families, IDs, IDsx, x_FamilyRegister), 
nodex(x_Families, IDt+111, IDtx, x_Family), 
node(x_Persons, IDs, IDsx, x_PersonRegister), 
edge(x_Persons, IDe, IDex, x_persons, IDs, IDsx, IDt, IDtx),
node(x_Persons, IDt, IDtx, x_Female), mmt=x_Families.

%%%% Father2Male %%%

% conditional rule Father2Male: FamilyMember-father -> Male
Father2Male(ID, IDx) :- edge(x_Families, IDe, IDex, x_father, IDs, IDsx, ID, IDx), node(x_Families, IDs, IDsx, x_Family), node(x_Families, ID, IDx, x_FamilyMember), mmt=x_Persons.
% conditional rule: FamilyMember2Male: FamilyMember-father -> Male
FamilyMember2Male(ID, IDx) :- Father2Male(ID, IDx), mmt=x_Persons.
% mapping node Father2Male: FamilyMember-father -> Male
mapping_node(x_Persons, ID, IDx, x_Male) :- Father2Male(ID, IDx), mmt=x_Persons.
:- node(x_Families, ID, IDx, x_FamilyMember), FamilyMember2Male(ID, IDx), not nodex(x_Persons, ID, IDx, x_Male), mmt=x_Persons.
:- node(x_Families, ID, IDx, x_FamilyMember), not FamilyMember2Male(ID, IDx), nodex(x_Persons, ID, IDx, x_Male), mmt=x_Persons.

% mapping node Father2Male: Male -> FamilyMember-father 
mapping_node(x_Families, ID, IDx, x_FamilyMember) :- node(x_Persons, ID, IDx, x_Male), mmt=x_Families.
:- node(x_Persons, ID, IDx, x_Male), not nodex(x_Families, ID, IDx, x_FamilyMember), mmt=x_Families.
% mapping node Father2Male: Male -> Family
mapping_node(x_Families, ID+111, IDx, x_Family) :- node(x_Persons, ID, IDx, x_Male),  not trace_node(x_Families, ID, IDx, x_FamilyMember), not trace_nb_node(x_Families, ID, IDx, x_FamilyMember).
:- node(x_Persons, ID, IDx, x_Male), prop(x_Persons, IDp, IDpx, ID, IDx, x_name, x_list([SN,N])), nodex(x_Families, ID, IDx, x_FamilyMember), not trace_node(x_Families, ID, IDx, x_FamilyMember), not trace_nb_node(x_Families, ID, IDx, x_FamilyMember), nodex(x_Families, ID+111, IDx, x_Family), not is_new_family_with_members(ID+111, IDx).

is_new_family_with_members(ID+111, IDx) :- node(x_Persons, ID, IDx, x_Male), prop(x_Persons, IDp, IDpx, ID, IDx, x_name, x_list([SN,N])), nodex(x_Families, ID, IDx, x_FamilyMember), nodex(x_Families, ID+111, IDx, x_Family), edgex(x_Families, IDe, IDex, x_father, ID+111, IDx, ID, IDx).
is_new_family_with_members(ID+111, IDx) :- node(x_Persons, ID, IDx, x_Male), prop(x_Persons, IDp, IDpx, ID, IDx, x_name, x_list([SN,N])), nodex(x_Families, ID, IDx, x_FamilyMember), nodex(x_Families, ID+111, IDx, x_Family), edgex(x_Families, IDe, IDex, x_sons, ID+111, IDx, ID, IDx).
:- node(x_Persons, ID, IDx, x_Female), prop(x_Persons, IDp, IDpx, ID, IDx, x_name, x_list([SN,N])), nodex(x_Families, ID, IDx, x_FamilyMember), not trace_node(x_Families, ID, IDx, x_FamilyMember), not trace_nb_node(x_Families, ID, IDx, x_FamilyMember), nodex(x_Families, ID+111, IDx, x_Family), not is_new_family_with_members(ID+111, IDx).
is_new_family_with_members(ID+111, IDx) :- node(x_Persons, ID, IDx, x_Female), prop(x_Persons, IDp, IDpx, ID, IDx, x_name, x_list([SN,N])), nodex(x_Families, ID, IDx, x_FamilyMember), nodex(x_Families, ID+111, IDx, x_Family), edgex(x_Families, IDe, IDex, x_mother, ID+111, IDx, ID, IDx).
is_new_family_with_members(ID+111, IDx) :- node(x_Persons, ID, IDx, x_Female), prop(x_Persons, IDp, IDpx, ID, IDx, x_name, x_list([SN,N])), nodex(x_Families, ID, IDx, x_FamilyMember), nodex(x_Families, ID+111, IDx, x_Family), edgex(x_Families, IDe, IDex, x_daughters, ID+111, IDx, ID, IDx).

% conditional rule
MemberofFamily(IDm, IDmx, IDf, IDfx) :- node(x_Families, IDm, IDmx, x_FamilyMember), node(x_Families, IDf, IDfx, x_Family), edge(x_Families, IDe, IDex, x_father, IDf, IDfx, IDm, IDmx).
% mapping_edge (fw from nested predicate): Father2Male: families-father -> persons-male
mapping_edge(x_Persons, IDe, IDex, x_persons, IDs, IDsx, IDt, IDtx) :- node(x_Families, IDs, IDsx, x_FamilyRegister), edge(x_Families, IDe6, IDex6, x_families, IDs, IDsx, ID13, IDx13), node(x_Families, ID13, IDx13, x_Family), edge(x_Families, IDe, IDex, x_father, ID13, IDx13, IDt, IDtx), node(x_Families, IDt, IDtx, x_FamilyMember), nodex(x_Persons, IDs, IDsx, x_PersonRegister), nodex(x_Persons, IDt, IDtx, x_Male).

% mapping_edge bw from nested predicate: Father2Male: father -> persons-male -> father
mapping_edge(x_Families, IDe+111, IDex, x_father, IDany, IDanyx, IDt, IDtx) :- node(x_Persons, ID1, IDx1, x_PersonRegister), edge(x_Persons, IDe, IDex, x_persons, ID1, IDx1, IDt, IDtx), node(x_Persons, IDt, IDtx, x_Male), prop(x_Persons, IDpt, IDptx, IDt, IDtx, x_name, x_list([SN,N])), nodex(x_Families, ID1, IDx1, x_FamilyRegister), edgex(x_Families, IDe2, IDe2x, x_families, ID1, IDx1, IDany, IDanyx), nodex(x_Families, IDany, IDanyx, x_Family), propx(x_Families, IDpany, IDpanyx, IDany, IDanyx, x_name, SN), mmt=x_Families.

mapping_edge(x_Families, IDe+111, IDex, x_sons, IDany, IDanyx, IDt, IDtx) :- 
node(x_Persons, ID1, IDx1, x_PersonRegister), edge(x_Persons, IDe, IDex, x_persons, ID1, IDx1, IDt, IDtx), node(x_Persons, IDt, IDtx, x_Male), prop(x_Persons, IDpt, IDptx, IDt, IDtx, x_name, x_list([SN,N])), nodex(x_Families, ID1, IDx1, x_FamilyRegister), edgex(x_Families, ID2e, ID2ex, x_families, ID1, IDx1, IDany, IDanyx), nodex(x_Families, IDany, IDanyx, x_Family), propx(x_Families, IDpany, IDpanyx, IDany, IDanyx, x_name, SN), mmt=x_Families.

% mapping_edge constraint: Father2Male
:- not edgex(x_Persons, IDe, IDex, x_persons, IDs, IDsx, IDt, IDtx), node(x_Families, IDs, IDsx, x_FamilyRegister), edge(x_Families, IDe6, IDex6, x_families, IDs, IDsx, ID13, IDx13), node(x_Families, ID13, IDx13, x_Family), edge(x_Families, IDe, IDex, x_father, ID13, IDx13, IDt, IDtx), node(x_Families, IDt, IDtx, x_FamilyMember), nodex(x_Persons, IDs, IDsx, x_PersonRegister), nodex(x_Persons, IDt, IDtx, x_Male), mmt=x_Persons.

% mapping prop FamilyMember2Male:FamilyMember.name -> Male.name 
mapping_prop(x_Persons,ID,IDx,IDm,IDmx,x_name,x_list([SN,N])) :-  MemberofFamily(IDm, IDmx, IDf, IDfx), prop(x_Families, ID, IDx, IDm, IDmx, x_name, N), prop(x_Families, IDp, IDpx, IDf, IDfx, x_name, SN), mmt=x_Persons.
% mapping prop FamilyMember2Male:Male.name -> FamilyMember.name 
mapping_prop(x_Families,ID,IDx,IDm,IDmx,x_name,N) :-  nodex(x_Families, IDm, IDmx, x_FamilyMember), node(x_Persons, IDm, IDmx, x_Male), prop(x_Persons, ID, IDx, IDm, IDmx, x_name, x_list([SN,N])), mmt=x_Families.
% mapping prop FamilyMember2Male:Male.name -> Family.name 
mapping_prop(x_Families,ID+111,IDx,IDm+111,IDmx,x_name,SN) :-  nodex(x_Families, IDm+111, IDmx, x_Family), node(x_Persons, IDm, IDmx, x_Male), prop(x_Persons, ID, IDx, IDm, IDmx, x_name, x_list([SN,N])), mmt=x_Families. 

% FamilyMember2Male:FamilyMember.name -> Male.name
:- node(x_Families, ID, IDx, x_FamilyMember), prop(x_Families, IDp, IDpx, ID, IDx, x_name, N), edge(x_Families, IDe, IDex, x_father, IDf, IDfx, ID, IDx), node(x_Families, IDf, IDfx, x_Family), prop(x_Families, IDpf, IDpfx, IDf, IDfx, x_name, SN), nodex(x_Persons, ID, IDx, x_Male), not propx(x_Persons, IDp, IDpx, ID, IDx, x_name, x_list([SN,N])), mmt=x_Persons.

% FamilyMember2Male:Male.name -> FamilyMember.name (each member must have a name)
:- node(x_Persons, ID, IDx, x_Male), prop(x_Persons, IDp, IDpx, ID, IDx, x_name, x_list([SN,N])), nodex(x_Families, ID, IDx, x_FamilyMember), not propx(x_Families, IDp, IDpx, ID, IDx, x_name, N), edgex(x_Families, IDe, IDex, x_father, IDf, IDfx, ID, IDx), nodex(x_Families, IDf, IDfx, x_Family), mmt=x_Families.

% FamilyMember2Male:Male.name -> Family.name (each family must have a name)
:- node(x_Persons, ID, IDx, x_Male), prop(x_Persons, IDp, IDpx, ID, IDx, x_name, x_list([SN,N])), nodex(x_Families, ID, IDx, x_FamilyMember), not propx(x_Families, IDp+111, IDpx, ID+111, IDx, x_name, SN), edgex(x_Families, IDe, IDex, x_father, ID+111, IDx, ID, IDx), nodex(x_Families, ID+111, IDx, x_Family), mmt=x_Families.


%%%% Sons2Male %%%
% conditional rule: Son2Male
Son2Male(ID, IDx) :- edge(x_Families, IDe, IDex, x_sons, IDs, IDsx, ID, IDx), node(x_Families, IDs, IDsx, x_Family), node(x_Families, ID, IDx, x_FamilyMember), mmt=x_Persons.
MemberofFamily(IDm, IDmx, IDf, IDfx) :- node(x_Families, IDm, IDmx, x_FamilyMember), node(x_Families, IDf, IDfx, x_Family), edge(x_Families, IDe, IDex, x_sons, IDf, IDfx, IDm, IDmx).

% mapping node FamilyMember-sons2Male: FamilyMember-sons -> Male
mapping_node(x_Persons, ID, IDx, x_Male) :- Son2Male(ID, IDx), mmt=x_Persons.

%mapping prop: FamilyMember2Male:FamilyMember.name -> Male.name
mapping_prop(x_Persons,ID,IDx,IDm,IDmx,x_name,x_list([SN,N])) :-  MemberofFamily(IDm, IDmx, IDf, IDfx), prop(x_Families, ID, IDx, IDm, IDmx, x_name, N), prop(x_Families, IDp, IDpx, IDf, IDfx, x_name, SN).
:- node(x_Families, ID, IDx, x_FamilyMember), prop(x_Families, IDp, IDpx, ID, IDx, x_name, N), edge(x_Families, IDe, IDex, x_sons, IDf, IDfx, ID, IDx), node(x_Families, IDf, IDfx, x_Family), prop(x_Families, IDpf, IDpfx, IDf, IDfx, x_name, SN), 
nodex(x_Persons, ID, IDx, x_Male), not propx(x_Persons, IDp, IDpx, ID, IDx, x_name, x_list([SN,N])), mmt=x_Persons.

% FamilyMember2Male:Male.name -> FamilyMember.name
:- node(x_Persons, ID, IDx, x_Male), prop(x_Persons, IDp, IDpx, ID, IDx, x_name, x_list([SN,N])), nodex(x_Families, ID, IDx, x_FamilyMember), not propx(x_Families, IDp, IDpx, ID, IDx, x_name, N), edgex(x_Families, IDe, IDex, x_sons, IDf, IDfx, ID, IDx), nodex(x_Families, IDf, IDfx, x_Family), mmt=x_Families.

% FamilyMember2Male:Male.name -> Family.name
:- node(x_Persons, ID, IDx, x_Male), prop(x_Persons, IDp, IDpx, ID, IDx, x_name, x_list([SN,N])), nodex(x_Families, ID, IDx, x_FamilyMember), not propx(x_Families, IDp+111, IDpx, ID+111, IDx, x_name, SN), edgex(x_Families, IDe, IDex, x_sons, ID+111, IDx, ID, IDx), nodex(x_Families, ID+111, IDx, x_Family), mmt=x_Families.

% conditional rule: FamilyMember2Male
FamilyMember2Male(ID, IDx) :- Son2Male(ID, IDx), mmt=x_Persons.

% mapping_edge (fw from nested predicate): Son2Male: families -> persons
mapping_edge(x_Persons, IDe, IDex, x_persons, IDs, IDsx, IDt, IDtx) :- node(x_Families, IDs, IDsx, x_FamilyRegister), edge(x_Families, IDe21, IDex21, x_families, IDs, IDsx, ID33, IDx33), node(x_Families, ID33, IDx33, x_Family), edge(x_Families, IDe, IDex, x_sons, ID33, IDx33, IDt, IDtx), node(x_Families, IDt, IDtx, x_FamilyMember), nodex(x_Persons, IDs, IDsx, x_PersonRegister), nodex(x_Persons, IDt, IDtx, x_Male).
% mapping_edge constraint: Son2Male
:- not edgex(x_Persons, IDe, IDex, x_persons, IDs, IDsx, IDt, IDtx), node(x_Families, IDs, IDsx, x_FamilyRegister), edge(x_Families, IDe21, IDex21, x_families, IDs, IDsx, ID33, IDx33), node(x_Families, ID33, IDx33, x_Family), edge(x_Families, IDe, IDex, x_sons, ID33, IDx33, IDt, IDtx), node(x_Families, IDt, IDtx, x_FamilyMember), nodex(x_Persons, IDs, IDsx, x_PersonRegister), nodex(x_Persons, IDt, IDtx, x_Male).


% non-bijective all alternatives rule: 
all_fathersons(IDe, IDex) :- edgex(x_Families, IDe, IDex, x_father, IDs, IDsx, IDt, IDtx), edgex(x_Families, IDe, IDex, x_sons, IDs, IDsx, IDt, IDtx), mmt=x_Families.
% alternatives rule: fathersons father
fathersons(IDe, IDex) :- edgex(x_Families, IDe, IDex, x_father, IDs, IDsx, IDt, IDtx), mmt=x_Families.
% alternatives rule: fathersons sons
fathersons(IDe, IDex) :- edgex(x_Families, IDe, IDex, x_sons, IDs, IDsx, IDt, IDtx), mmt=x_Families.

is_father_or_sons(IDt, IDtx) :- nodex(x_Families, IDt, IDtx, x_FamilyMember), edgex(x_Families, IDe, IDex, x_father, IDs, IDsx, IDt, IDtx), mmt=x_Families.
is_father_or_sons(IDt, IDtx) :- nodex(x_Families, IDt, IDtx, x_FamilyMember), edgex(x_Families, IDe, IDex, x_sons, IDs, IDsx, IDt, IDtx), mmt=x_Families.

% non-bijective "at least one" constraint: 
:- node(x_Persons, IDt, IDtx, x_Male), nodex(x_Families, IDt, IDtx, x_FamilyMember), not is_father_or_sons(IDt, IDtx), mmt=x_Families.
% non-bijective "not all together" constraint: 
:- edge(x_Persons, IDe, IDex, x_persons, IDs, IDsx, IDt, IDtx), node(x_Persons, IDt, IDtx, x_Male), all_fathersons(IDe+111, IDex), mmt=x_Families.


%%%%% Mother2Female %%%%%

% conditional rule: Mother2Female
Mother2Female(ID, IDx) :- edge(x_Families, IDe, IDex, x_mother, IDs, IDsx, ID, IDx), node(x_Families, IDs, IDsx, x_Family), node(x_Families, ID, IDx, x_FamilyMember), mmt=x_Persons.
% conditional rule: FamilyMember2Female
FamilyMember2Female(ID, IDx) :- Mother2Female(ID, IDx), mmt=x_Persons.

% mapping node Mother2Female: Mother -> Female
mapping_node(x_Persons, ID, IDx, x_Female) :- Mother2Female(ID, IDx), mmt=x_Persons.
:- node(x_Families, ID, IDx, x_FamilyMember), FamilyMember2Female(ID, IDx), not nodex(x_Persons, ID, IDx, x_Female), mmt=x_Persons.
:- node(x_Families, ID, IDx, x_FamilyMember), not FamilyMember2Female(ID, IDx), nodex(x_Persons, ID, IDx, x_Female), mmt=x_Persons.

% mapping node Mother2Female: Female -> FamilyMember
mapping_node(x_Families, ID, IDx, x_FamilyMember) :- node(x_Persons, ID, IDx, x_Female), mmt=x_Families.
:- node(x_Persons, ID, IDx, x_Female), not nodex(x_Families, ID, IDx, x_FamilyMember), mmt=x_Families.

% mapping node Mother2Female: Female -> Family
is_existing_mother(ID, IDx) :- nodex(x_Families, ID, IDx, x_FamilyMember), edgex(x_Families, IDe, IDex, x_mother, IDf, IDfx, ID, IDx), nodex(x_Families, IDf, IDfx, x_Family), IDx!=IDfx, ID!=IDx.
is_existing_daughters(ID, IDx) :- nodex(x_Families, ID, IDx, x_FamilyMember), edgex(x_Families, IDe, IDex, x_daughters, IDf, IDfx, ID, IDx), nodex(x_Families, IDf, IDfx, x_Family), IDx!=IDfx, ID!=IDx.

mapping_node(x_Families, ID+111, IDx, x_Family) :- node(x_Persons, ID, IDx, x_Female), not trace_node(x_Families, ID, IDx, x_FamilyMember), not trace_nb_node(x_Families, ID, IDx, x_FamilyMember).
MemberofFamily(IDm, IDmx, IDf, IDfx) :- node(x_Families, IDm, IDmx, x_FamilyMember), node(x_Families, IDf, IDfx, x_Family), edge(x_Families, IDe, IDex, x_mother, IDf, IDfx, IDm, IDmx).

% mapping prop FamilyMember2Male:FamilyMember.name -> Female.name
mapping_prop(x_Persons,ID,IDx,IDm,IDmx,x_name,x_list([SN,N])) :-  MemberofFamily(IDm, IDmx, IDf, IDfx), prop(x_Families, ID, IDx, IDm, IDmx, x_name, N), prop(x_Families, IDp, IDpx, IDf, IDfx, x_name, SN).
:- node(x_Families, ID, IDx, x_FamilyMember), prop(x_Families, IDp, IDpx, ID, IDx, x_name, N), 
edge(x_Families, IDe, IDex, x_mother, IDf, IDfx, ID, IDx), node(x_Families, IDf, IDfx, x_Family), prop(x_Families, IDpf, IDpfx, IDf, IDfx, x_name, SN),  nodex(x_Persons, ID, IDx, x_Female), not propx(x_Persons, IDp, IDpx, ID, IDx, x_name, x_list([SN,N])), mmt=x_Persons.

% FamilyMember2Female:Female.name -> FamilyMember.name
mapping_prop(x_Families,ID,IDx,IDm,IDmx,x_name,N) :-  nodex(x_Families, IDm, IDmx, x_FamilyMember), node(x_Persons, IDm, IDmx, x_Female), prop(x_Persons, ID, IDx, IDm, IDmx, x_name, x_list([SN,N])), mmt=x_Families.

% FamilyMember2Female:Female.name -> Family.name
mapping_prop(x_Families,ID+111,IDx,IDm+111,IDmx,x_name,SN) :-  nodex(x_Families, IDm+111, IDmx, x_Family), node(x_Persons, IDm, IDmx, x_Female), prop(x_Persons, ID, IDx, IDm, IDmx, x_name, x_list([SN,N])), mmt=x_Families. %commented in v.3

:- node(x_Persons, ID, IDx, x_Female), prop(x_Persons, IDp, IDpx, ID, IDx, x_name, x_list([SN,N])), nodex(x_Families, ID, IDx, x_FamilyMember), not propx(x_Families, IDp, IDpx, ID, IDx, x_name, N), edgex(x_Families, IDe, IDex, x_mother, IDf, IDfx, ID, IDx),nodex(x_Families, IDf, IDfx, x_Family), mmt=x_Families.

% FamilyMember2Male:Female.name -> Family.name (each family must have a name)
:- node(x_Persons, ID, IDx, x_Female), prop(x_Persons, IDp, IDpx, ID, IDx, x_name, x_list([SN,N])), nodex(x_Families, ID, IDx, x_FamilyMember), not propx(x_Families, IDp+111, IDpx, ID+111, IDx, x_name, SN), edgex(x_Families, IDe, IDex, x_mother, ID+111, IDx, ID, IDx),nodex(x_Families, ID+111, IDx, x_Family), mmt=x_Families.


% mapping_edge fw from nested predicate: Mother2Female: families-mother -> persons-female 
mapping_edge(x_Persons, IDe, IDex, x_persons, IDs, IDsx, IDt, IDtx) :- node(x_Families, IDs, IDsx, x_FamilyRegister), edge(x_Families, IDe14, IDex14, x_families, IDs, IDsx, ID25, IDx25), node(x_Families, ID25, IDx25, x_Family), edge(x_Families, IDe, IDex, x_mother, ID25, IDx25, IDt, IDtx), node(x_Families, IDt, IDtx, x_FamilyMember), nodex(x_Persons, IDs, IDsx, x_PersonRegister), nodex(x_Persons, IDt, IDtx, x_Female).
% mapping_edge constraint: Mother2Female
:- not edgex(x_Persons, IDe, IDex, x_persons, IDs, IDsx, IDt, IDtx), node(x_Families, IDs, IDsx, x_FamilyRegister), edge(x_Families, IDe14, IDex14, x_families, IDs, IDsx, ID25, IDx25), node(x_Families, ID25, IDx25, x_Family), edge(x_Families, IDe, IDex, x_mother, ID25, IDx25, IDt, IDtx), node(x_Families, IDt, IDtx, x_FamilyMember), nodex(x_Persons, IDs, IDsx, x_PersonRegister), nodex(x_Persons, IDt, IDtx, x_Female).


% mapping_edge bw from nested predicate: Father2Male: mother -> persons-female -> mother
mapping_edge(x_Families, IDe+111, IDex, x_mother, IDany, IDanyx, IDt, IDtx) :- node(x_Persons, ID1, IDx1, x_PersonRegister), edge(x_Persons, IDe, IDex, x_persons, ID1, IDx1, IDt, IDtx), 
node(x_Persons, IDt, IDtx, x_Female), prop(x_Persons, IDpt, IDptx, IDt, IDtx, x_name, x_list([SN,N])),nodex(x_Families, ID1, IDx1, x_FamilyRegister), edgex(x_Families, IDe2, IDe2x, x_families, ID1, IDx1, IDany, IDanyx), nodex(x_Families, IDany, IDanyx, x_Family), propx(x_Families, IDpany, IDpanyx, IDany, IDanyx, x_name, SN), mmt=x_Families.

mapping_edge(x_Families, IDe+111, IDex, x_daughters, IDany, IDanyx, IDt, IDtx) :- node(x_Persons, ID1, IDx1, x_PersonRegister), edge(x_Persons, IDe, IDex, x_persons, ID1, IDx1, IDt, IDtx), node(x_Persons, IDt, IDtx, x_Female), prop(x_Persons, IDpt, IDptx, IDt, IDtx, x_name, x_list([SN,N])),nodex(x_Families, ID1, IDx1, x_FamilyRegister), edgex(x_Families, ID2e, ID2ex, x_families, ID1, IDx1, IDany, IDanyx), nodex(x_Families, IDany, IDanyx, x_Family), propx(x_Families, IDpany, IDpanyx, IDany, IDanyx, x_name, SN), mmt=x_Families.


%%%%% Daughter2Female %%%%%

% Conditional rule: Daughter2Female
Daughter2Female(ID, IDx) :- edge(x_Families, IDe, IDex, x_daughters, IDs, IDsx, ID, IDx), node(x_Families, IDs, IDsx, x_Family), node(x_Families, ID, IDx, x_FamilyMember), mmt=x_Persons.
% mapping node  Daughter2Female:  Daughter -> Female
mapping_node(x_Persons, ID, IDx, x_Female) :- Daughter2Female(ID, IDx), mmt=x_Persons.

% mapping prop FamilyMember2Female:FamilyMember.name -> Female.name
mapping_prop(x_Persons,ID,IDx,IDm,IDmx,x_name,x_list([SN,N])) :-  MemberofFamily(IDm, IDmx, IDf, IDfx), prop(x_Families, ID, IDx, IDm, IDmx, x_name, N), prop(x_Families, IDp, IDpx, IDf, IDfx, x_name, SN).
:- node(x_Families, ID, IDx, x_FamilyMember), prop(x_Families, IDp, IDpx, ID, IDx, x_name, N), edge(x_Families, IDe, IDex, x_daughters, IDf, IDfx, ID, IDx),node(x_Families, IDf, IDfx, x_Family), prop(x_Families, IDpf, IDpfx, IDf, IDfx, x_name, SN), nodex(x_Persons, ID, IDx, x_Female), not propx(x_Persons, IDp, IDpx, ID, IDx, x_name, x_list([SN,N])), mmt=x_Persons.

% FamilyMember2Female:Female.name -> FamilyMember.name
:- node(x_Persons, ID, IDx, x_Female), prop(x_Persons, IDp, IDpx, ID, IDx, x_name, x_list([SN,N])), nodex(x_Families, ID, IDx, x_FamilyMember), not propx(x_Families, IDp, IDpx, ID, IDx, x_name, N), edgex(x_Families, IDe, IDex, x_daughters, IDf, IDfx, ID, IDx),nodex(x_Families, IDf, IDfx, x_Family), 
mmt=x_Families.

% FamilyMember2Male:Female.name -> Family.name
:- node(x_Persons, ID, IDx, x_Female), prop(x_Persons, IDp, IDpx, ID, IDx, x_name, x_list([SN,N])), nodex(x_Families, ID, IDx, x_FamilyMember), not propx(x_Families, IDp+111, IDpx, ID+111, IDx, x_name, SN), edgex(x_Families, IDe, IDex, x_daughters, ID+111, IDx, ID, IDx),nodex(x_Families, ID+111, IDx, x_Family),  mmt=x_Families.

% Conditional rule: FamilyMember2Female
FamilyMember2Female(ID, IDx) :- Daughter2Female(ID, IDx), mmt=x_Persons.
MemberofFamily(IDm, IDmx, IDf, IDfx) :- node(x_Families, IDm, IDmx, x_FamilyMember), node(x_Families, IDf, IDfx, x_Family), edge(x_Families, IDe, IDex, x_daughters, IDf, IDfx, IDm, IDmx).

% mapping_edge fw from nested predicate: Daughter2Female: families -> persons
mapping_edge(x_Persons, IDe, IDex, x_persons, IDs, IDsx, IDt, IDtx) :- node(x_Families, IDs, IDsx, x_FamilyRegister), edge(x_Families, IDe28, IDex28, x_families, IDs, IDsx, ID39, IDx39), node(x_Families, ID39, IDx39, x_Family), edge(x_Families, IDe, IDex, x_daughters, ID39, IDx39, IDt, IDtx), node(x_Families, IDt, IDtx, x_FamilyMember), nodex(x_Persons, IDs, IDsx, x_PersonRegister), nodex(x_Persons, IDt, IDtx, x_Female).
:- not edgex(x_Persons, IDe, IDex, x_persons, IDs, IDsx, IDt, IDtx), node(x_Families, IDs, IDsx, x_FamilyRegister), edge(x_Families, IDe28, IDex28, x_families, IDs, IDsx, ID39, IDx39), node(x_Families, ID39, IDx39, x_Family), edge(x_Families, IDe, IDex, x_daughters, ID39, IDx39, IDt, IDtx), node(x_Families, IDt, IDtx, x_FamilyMember), nodex(x_Persons, IDs, IDsx, x_PersonRegister), nodex(x_Persons, IDt, IDtx, x_Female).

:- node(x_Persons, ID, IDx, x_Female), prop(x_Persons, IDp, IDpx, ID, IDx, x_name, x_list([SN,N])), nodex(x_Families, ID, IDx, x_FamilyMember), edgex(x_Families, IDe, IDex, x_daughters, ID+111, IDx, ID, IDx),
nodex(x_Families, ID+111, IDx, x_Family), not propx(x_Families, IDp+111, IDpx, ID+111, IDx, x_name, SN), mmt=x_Families.

% non-bijective all alternatives rule: 
all_motherdaughters(IDe, IDex) :- edgex(x_Families, IDe, IDex, x_mother, IDs, IDsx, IDt, IDtx), edgex(x_Families, IDe, IDex, x_daughters, IDs, IDsx, IDt, IDtx), mmt=x_Families.
% alternatives rule: fathersons father
motherdaughters(IDe, IDex) :- edgex(x_Families, IDe, IDex, x_mother, IDs, IDsx, IDt, IDtx), mmt=x_Families.
% alternatives rule: fathersons sons
motherdaughters(IDe, IDex) :- edgex(x_Families, IDe, IDex, x_daughters, IDs, IDsx, IDt, IDtx), mmt=x_Families.

is_mother_or_daughters(IDt, IDtx) :- nodex(x_Families, IDt, IDtx, x_FamilyMember), edgex(x_Families, IDe, IDex, x_mother, IDs, IDsx, IDt, IDtx), mmt=x_Families.
is_mother_or_daughters(IDt, IDtx) :- nodex(x_Families, IDt, IDtx, x_FamilyMember), edgex(x_Families, IDe, IDex, x_daughters, IDs, IDsx, IDt, IDtx), mmt=x_Families.

% non-bijective "at least one" constraint: 
:- node(x_Persons, IDt, IDtx, x_Female), nodex(x_Families, IDt, IDtx, x_FamilyMember), not is_mother_or_daughters(IDt, IDtx), mmt=x_Families.
% non-bijective "not all togheter" constraint: 
:- edge(x_Persons, IDe, IDex, x_persons, IDs, IDsx, IDt, IDtx), node(x_Persons, IDt, IDtx, x_Female), all_motherdaughters(IDe+111, IDex), mmt=x_Families.


%%%%%%%%%%%%%%%% OPPOSITE %%%%%%%%%%%%%%%%%
edgex(x_Families, ID+3210, IDx, x_familiesInverse, IDS, IDSx, IDT, IDTx) :- edgex(x_Families, ID, IDx, x_families, IDT, IDTx, IDS, IDSx),
    is_generable_edge(x_Families,ID,IDx,x_families,IDT,IDTx,IDS,IDSx), mapping_edge(x_Families,ID,IDx,x_families,IDT,IDTx,IDS,IDSx).
edgex(x_Families, ID+3210, IDx, x_fatherInverse, IDS, IDSx, IDT, IDTx) :- edgex(x_Families, ID, IDx, x_father, IDT, IDTx, IDS, IDSx),
    is_generable_edge(x_Families,ID,IDx,x_father,IDT,IDTx,IDS,IDSx), mapping_edge(x_Families,ID,IDx,x_father,IDT,IDTx,IDS,IDSx).
edgex(x_Families, ID+3210, IDx, x_motherInverse, IDS, IDSx, IDT, IDTx) :- edgex(x_Families, ID, IDx, x_mother, IDT, IDTx, IDS, IDSx),
    is_generable_edge(x_Families,ID,IDx,x_mother,IDT,IDTx,IDS,IDSx), mapping_edge(x_Families,ID,IDx,x_mother,IDT,IDTx,IDS,IDSx).
edgex(x_Families, ID+3210, IDx, x_sonsInverse, IDS, IDSx, IDT, IDTx) :- edgex(x_Families, ID, IDx, x_sons, IDT, IDTx, IDS, IDSx),
    is_generable_edge(x_Families,ID,IDx,x_sons,IDT,IDTx,IDS,IDSx), mapping_edge(x_Families,ID,IDx,x_sons,IDT,IDTx,IDS,IDSx).
edgex(x_Families, ID+3210, IDx, x_daughtersInverse, IDS, IDSx, IDT, IDTx) :- edgex(x_Families, ID, IDx, x_daughters, IDT, IDTx, IDS, IDSx),
    is_generable_edge(x_Families,ID,IDx,x_daughters,IDT,IDTx,IDS,IDSx), mapping_edge(x_Families,ID,IDx,x_daughters,IDT,IDTx,IDS,IDSx).
edgex(x_Persons, ID+3210, IDx, x_personsInverse, IDS, IDSx, IDT, IDTx) :- edgex(x_Persons, ID, IDx, x_persons, IDT, IDTx, IDS, IDSx),
    is_generable_edge(x_Persons,ID,IDx,x_persons,IDT,IDTx,IDS,IDSx), mapping_edge(x_Persons,ID,IDx,x_persons,IDT,IDTx,IDS,IDSx).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
%%%%%%%%%%%%%%%%%%%%%%    TRANSFORMATION ENGINE   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 


%%%%%%%%%%%%%%%%%%%%%%   TRACES GENERATION    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%genero i trace relativi agli elementi non presenti nelle relations%%%%%%%

is_metanode_related(MMS,MCS) :- relation_node(R, MMS, MCS, X), relation_node(R, mmt, MCT, Y), 
								%not relation_direction(R,mmt,MMS), 
								MMS!=mmt.
is_metanode_non_bijective_related(MMS,MCS) :- relation_node(R, MMS, MCS, X), relation_node(R, mmt, MCT, Y), 
											  relation_node(R2, MMS, MCS2, Z), relation_node(R2, mmt, MCT, W), 
											  MCS!=MCS2, R!=R2, MMS!=mmt.

trace_nodex(MMS,IDx,ID,MCS) :- node(MMS,IDx,ID,MCS), not is_metanode_related(MMS,MCS), MMS!=mmt.
trace_nodex(MMS,IDx,ID,MCS) :- node(MMS,IDx,ID,MCS), relation_node(R, MMS, MCS, X), relation_node(R, mmt, MCT, Y), not nodex(mmt,IDx,ID,MCT), MMS!=mmt.

trace_nb_nodex(MMS,IDx,ID,MCS) :- node(MMS,IDx,ID,MCS), is_metanode_non_bijective_related(MMS,MCS), MMS!=mmt.

%-------------------------------------------------------------------------------%

is_metaedge_related(MMS,NameS,NodeSourceS,NodeTargetS) :- relation_edge(R,MMS,NameS,NodeSourceS,NodeTargetS,X), relation_edge(R,mmt,NameT,NodeSourceT,NodeTargetT,Y), 
													   % not relation_direction(R,mmt,MMS), 
													   MMS!=mmt.
is_metaedge_non_bijective_related(MMS,NameS,NodeSourceS,NodeTargetS) :-
	relation_edge(R,MMS,NameS,NodeSourceS,NodeTargetS,X), relation_edge(R,mmt,NameT,NodeSourceT,NodeTargetT,Y), 
	relation_edge(R2,MMS,NameS2,NodeSourceS2,NodeTargetS2,Z), relation_edge(R2,mmt,NameT,NodeSourceT,NodeTargetT,W), 
	NameS!=NameS2, R!=R2, MMS!=mmt.
											  						    
is_metaedge_non_bijective_related(MMS,Name1,NodeSourceS,NodeTargetS) :-
	mapping_edge(mmt,IDe1,IDex1,Name,IDs1,IDsx1,IDt1,IDtx1), edge(MMS,IDe1,IDex1,Name1,IDs11,IDsx11,IDt1,IDtx1),
	mapping_edge(mmt,IDe2,IDex2,Name,IDs2,IDsx2,IDt2,IDtx2), edge(MMS,IDe2,IDex2,Name2,IDs22,IDsx22,IDt2,IDtx2),
	node(MMS,IDs11,IDsx11,NodeSourceS), node(MMS,IDt1,IDtx1,NodeTargetS),
	MMS!=mmt,Name1!=Name2.
											  
trace_edgex(MMS,IDx,ID,Name,IDNodeSourcex,IDNodeSource,IDNodeTargetx,IDNodeTarget) :- 
        edge(MMS,IDx,ID,Name,IDNodeSourcex,IDNodeSource,IDNodeTargetx,IDNodeTarget),
        not is_metaedge_related(MMS,Name,NodeSource,NodeTarget),
        not is_metaedge_non_bijective_related(MMS,Name,NodeSource,NodeTarget),
        node(MMS,IDNodeSourcex,IDNodeSource,NodeSource),node(MMS,IDNodeTargetx,IDNodeTarget,NodeTarget),MMS!=mmt.
trace_edgex(MMS,IDx,ID,Name,IDNodeSourcex,IDNodeSource,IDNodeTargetx,IDNodeTarget) :- 
		edge(MMS,IDx,ID,Name,IDNodeSourcex,IDNodeSource,IDNodeTargetx,IDNodeTarget),
		relation_edge(R,MMS,NameS,NodeSourceS,NodeTargetS,X),
		relation_edge(R,mmt,NameT,NodeSourceT,NodeTargetT,Y),
		not edgex(mmt,IDx,ID,NameT,IDNodeSourcex,IDNodeSource,IDNodeTargetx,IDNodeTarget). 
trace_nb_edgex(MMS,IDx,ID,Name,IDNodeSourcex,IDNodeSource,IDNodeTargetx,IDNodeTarget) :- 
        edge(MMS,IDx,ID,Name,IDNodeSourcex,IDNodeSource,IDNodeTargetx,IDNodeTarget), is_metaedge_non_bijective_related(MMS,Name,NodeSourceS,NodeTargetS),
        node(MMS,IDNodeSourcex,IDNodeSource,NodeSource),node(MMS,IDNodeTargetx,IDNodeTarget,NodeTarget),MMS!=mmt.

%-------------------------------------------------------------------------------%    
    
is_metaprop_related(MMS,NameS,MCS) :- relation_prop(R,MMS,NameS,MCS,X), relation_prop(R,mmt,NameT,MCT,Y), 
									 %not relation_direction(R,mmt,MMS), 
									 MMS!=mmt.
is_metaprop_non_bijective_related(MMS,NameS,MCS) :- relation_prop(R,MMS,NameS,MCS,X), relation_prop(R,mmt,NameT,MCT,Y), 
									  relation_prop(R2,MMS,NameS2,MCS2,Z), relation_prop(R2,mmt,NameT,MCT,W), 
									  NameS!=NameS2, R!=R2, MMS!=mmt.

trace_propx(MMS,IDx,ID,IDmcx,IDmc,Name,Value) :- prop(MMS,IDx,ID,IDmcx,IDmc,Name,Value), not is_metaprop_related(MMS,Name,MCS),
node(MMS,IDmcx,IDmc,MCS),MMS!=mmt.
trace_nb_propx(MMS,IDx,ID,IDmcx,IDmc,Name,Value) :- prop(MMS,IDx,ID,IDmcx,IDmc,Name,Value), is_metaprop_non_bijective_related(MMS,Name,MCS),
node(MMS,IDmcx,IDmc,MCS),MMS!=mmt.

trace_propx(MMS,IDx,ID,IDmcx,IDmc,Name,Value) :- prop(MMS,IDx,ID,IDmcx,IDmc,Name,Value), trace_nodex(MMS,IDmcx,IDmc,MCS),MMS!=mmt.
trace_nb_propx(MMS,IDx,ID,IDmcx,IDmc,Name,Value) :- prop(MMS,IDx,ID,IDmcx,IDmc,Name,Value), trace_nb_nodex(MMS,IDmcx,IDmc,MCS),MMS!=mmt.

%:- node(MMT,IDx,ID,Node1), nodex(MMT,IDx,ID,Node2), metanode(MMT,Node2),  Node1!=Node2, MMT=mmt.

%%%%%%%%genero i trace links%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

trace_linkx(MMS,ID,IDx,ID,IDx,Node,R) :-
    relation_node(R,MMS,Node,X), relation_node(R,mmt,Node2,Y),
    node(MMS,ID,IDx,Node), nodex(mmt,ID,IDx,Node2),
    MMS!=mmt.
trace_linkx(mmt,ID,IDx,ID,IDx,Node2,R) :-
    relation_node(R,MMS,Node,X), relation_node(R,mmt,Node2,Y),
    node(MMS,ID,IDx,Node), nodex(mmt,ID,IDx,Node2),
    MMS!=mmt.
trace_linkx(MMS,ID,IDx,IDp,IDpx,Prop,R) :-
    relation_prop(R,MMS,Prop,Node,X), relation_prop(R,mmt,Prop2,Node2,Y),
    prop(MMS,ID,IDx,IDp,IDpx,Prop,Value), node(MMS,IDp,IDpx,Node),
    propx(mmt,ID,IDx,IDp,IDpx,Prop2,Value), nodex(mmt,IDp,IDpx,Node2),
    MMS!=mmt.
trace_linkx(mmt,ID,IDx,IDp,IDpx,Prop2,R) :-
    relation_prop(R,MMS,Prop,Node,X), relation_prop(R,mmt,Prop2,Node2,Y),
    prop(MMS,ID,IDx,IDp,IDpx,Prop,Value), node(MMS,IDp,IDpx,Node),
    propx(mmt,ID,IDx,IDp,IDpx,Prop2,Value), nodex(mmt,IDp,IDpx,Node2),
    MMS!=mmt.
trace_linkx(MMS,ID,IDx,IDS,IDSx,Edge,R) :-
    relation_edge(R,MMS,Edge,NodeSource,NodeTarget,X), relation_edge(R,mmt,Edge2,NodeSource2,NodeTarget2,Y),
    edge(MMS,ID,IDx,Edge,IDS,IDSx,IDT,IDTx), node(MMS,IDS,IDSx,NodeSource), node(MMS,IDT,IDTx,NodeTarget),
    edgex(mmt,ID,IDx,Edge2,IDS,IDSx,IDT,IDTx), nodex(mmt,IDS,IDSx,NodeSource2), nodex(mmt,IDT,IDTx,NodeTarget2),
    MMS!=mmt.
trace_linkx(mmt,ID,IDx,IDS,IDSx,Edge2,R) :-
    relation_edge(R,MMS,Edge,NodeSource,NodeTarget,X), relation_edge(R,mmt,Edge2,NodeSource2,NodeTarget2,Y),
    edge(MMS,ID,IDx,Edge,IDS,IDSx,IDT,IDTx), node(MMS,IDS,IDSx,NodeSource), node(MMS,IDT,IDTx,NodeTarget),
    edgex(mmt,ID,IDx,Edge2,IDS,IDSx,IDT,IDTx), nodex(mmt,IDS,IDSx,NodeSource2), nodex(mmt,IDT,IDTx,NodeTarget2),
    MMS!=mmt.

%traces generated from mapping_edge are missing

%%%%%%%%%%% Metamodel Target Conformance Check %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

is_target_metamodel_conform(MM,Node) :- metanode(MM,Node).
is_target_metamodel_conform(MM,Prop) :- metaprop(MM,Prop,Node).
is_target_metamodel_conform(MM,Edge) :- metaedge(MM,MetaEdge,Edge,NodeSource,NodeTarget).

%%%%%%%%%% Relations Check %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

is_related(MM,Node) :- relation_node(R,MM,Node,X), relation_node(R,MM2,Node2,Y).
is_related(MM,Prop) :- relation_prop(R,MM,Prop,Node,X), relation_prop(R,MM2,Prop2,Node2,Y).
is_related(MM,Edge) :- relation_edge(R,MM,Edge,NodeSource,NodeTarget,X), relation_edge(R,MM2,Edge2,NodeSource2,NodeTarget2,Y).
is_related(MM,Edge) :- relation_edge(R,MM,Edge,NodeSource,NodeTarget,X), relation_node(R,MM2,Node2,Y).

%%%%%%%%%% Mapping Rules %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%node from node
%%mapping_node(MM,ID,IDx,Node) :- relation_node(R,MM,Node,X), relation_node(R,MM2,Node2,Y),node(MM2,ID,IDx,Node2), MM!=MM2.
%mapping_node(MM,IDX,IDx,Node) :- relation_node(R,MM,Node,X), relation_node(R,MM2,Node2,Y),node(MM2,ID,IDx,Node2), IDX=ID+X, MM!=MM2.

%prop from prop        
%mapping_prop(MM,ID,IDx,IDXmc,IDmcx,Prop,Value) :-
              %relation_prop(R,MM,Prop,Node,X), relation_prop(R,MM2,Prop2,Node2,Y),
              %prop(MM2,ID,IDx,IDmc,IDmcx,Prop2,Value), node(MM2,IDmc,IDmcx,Node2), nodex(MM,IDmc,IDmcx,Node),
              %IDXmc=IDmc+X, MM!=MM2.
%%mapping_prop(MM,ID,IDmc,Prop,Value) :- relation_prop(R,MM,Prop,Node,X), relation_prop(R,MM2,Prop2,Node2,X),
%%              prop(MM2,ID,IDmc2,Prop2,Value2), setting_prop(R,ID,IDmc,Value), MM!=MM2.
       
%edge from edge         
%%mapping_edge(MM,IDX,IDx,Edge,IDS,IDSx,IDT,IDTx) :- 
%%                        relation_edge(R,MM,Edge,NodeSource,NodeTarget,X),relation_edge(R,MM2,Edge2,NodeSource2,NodeTarget2,Y), 
%%            edge(MM2,ID,IDx,Edge2,IDS,IDSx,IDT,IDTx), IDX=ID+X, MM!=MM2.

%%mapping_edge(MM,IDX,IDx,Edge,IDS,IDSx,IDTZ,IDTx) :- 
%%                        relation_edge(R,MM,Edge,NodeSource,NodeTarget,X),relation_edge(R,MM2,Edge2,NodeSource2,NodeTarget2,Y), 
%%            edge(MM2,ID,IDx,Edge2,IDS,IDSx,IDT,IDTx), 
%%            relation_node(R1,MM,Node,Z), relation_node(R1,MM2,Node2,W),node(MM2,IDT,IDTx,Node2),
%%            IDX=ID+X, IDTZ=IDT+Z, MM!=MM2.

%mapping_edge(MM,IDX,IDx,Edge,IDSZ,IDSx,IDTZ,IDTx) :- 
%            relation_edge(R,MM,Edge,NodeSource,NodeTarget,X),relation_edge(R,MM2,Edge2,NodeSource2,NodeTarget2,Y), 
%            edge(MM2,ID,IDx,Edge2,IDS,IDSx,IDT,IDTx), 
%            nodex(MM,IDS,IDSx,NodeSource), nodex(MM,IDT,IDTx,NodeTarget),
%            relation_node(R1,MM,_,Z), relation_node(R1,MM2,NodeTarget2,W), node(MM2,IDT,IDTx,NodeTarget2),
%            relation_node(R2,MM,_,Z2), relation_node(R2,MM2,NodeSource2,W2), node(MM2,IDS,IDSx,NodeSource2),
%            IDX=ID+X, IDTZ=IDT+Z, IDSZ=IDS+Z2, MM!=MM2.

% edge from node
%mapping_edge(MM,ID,IDx,Edge,ID,IDx,IDT,IDTx) :-
%	relation_edge(R,MM,Edge,NodeSource,NodeTarget,X),relation_node(R,MM2,Node2,Y),
%	relation_node(R2,MM,NodeSource,Z), relation_node(R2,MM2,Node2,W),
%    node(MM2,ID,IDx,Node2), nodex(MM,ID,IDx,NodeSource),
%    nodex(MM,IDT,IDTx,NodeTarget),
%    MM!=MM2.	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%% Generability Check %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                                                                                                
is_generable_node(MM,ID,IDx,Node) v -is_generable_node(MM,ID,IDx,Node) :- mapping_node(MM,ID,IDx,Node), %is_related(MM,Node), 
                                                                                                                is_target_metamodel_conform(MM,Node), MM=mmt.
%:- -is_generable_node(MM,ID,IDx,Node).

is_generable_prop(MM,ID,IDx,Prop,Value) v -is_generable_prop(MM,ID,IDx,Prop,Value) :- mapping_prop(MM,ID,IDx,IDmc,IDmcx,Prop,Value), %is_related(MM,Prop), 
                                                                                                               is_target_metamodel_conform(MM,Prop), MM=mmt.
%:--is_generable_prop(MM,ID,Prop,Value).
                                                                        
is_generable_edge(MM,ID,IDx,Edge,IDS,IDSx,IDT,IDTx) v -is_generable_edge(MM,ID,IDx,Edge,IDS,IDSx,IDT,IDTx) :- mapping_edge(MM,ID,IDx,Edge,IDS,IDSx,IDT,IDTx), 
                                                                                                                %is_related(MM,Edge), 
                                                                                                                is_target_metamodel_conform(MM,Edge),MM=mmt.
%:- -is_generable_edge(MM,ID,IDx,Edge,IDS,IDSx,IDT,IDTx).                                                                                                               
                                                                                                                
                        
%%%%%%%%% Element Generation by Transformation Rule %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

nodex(MM,ID,IDx,Node) :- is_generable_node(MM,ID,IDx,Node), mapping_node(MM,ID,IDx,Node),MM=mmt.


propx(MM,ID,IDx,IDmc,IDmcx,Prop,Value) :- is_generable_prop(MM,ID,IDx,Prop,Value), mapping_prop(MM,ID,IDx,IDmc,IDmcx,Prop,Value), MM=mmt.

edgex(MM,ID,IDx,Edge,IDS,IDSx,IDT,IDTx) :- is_generable_edge(MM,ID,IDx,Edge,IDS,IDSx,IDT,IDTx), mapping_edge(MM,ID,IDx,Edge,IDS,IDSx,IDT,IDTx), MM=mmt. 
    
:- nodex(MM,ID,IDx,Node), nodex(MM,ID,IDx,Node2), is_a_non_bijective_relation(Node,Node2), Node2!=Node.
is_a_non_bijective_relation(N1,N2):- relation_node(R, MMS, N1, X), relation_node(R, mmt, N2, Y), 
									relation_node(R2, MMS, N1, Z), relation_node(R2, mmt, N3, W), 
								    N2!=N3, R!=R2, MMS!=mmt.
is_a_non_bijective_relation_with(N1,N2,N3):- relation_node(R, MMS, N1, X), relation_node(R, mmt, N2, Y), 
									relation_node(R2, MMS, N1, Z), relation_node(R2, mmt, N3, W), 
								    N2!=N3, R!=R2, MMS!=mmt.								    

:- not nodex(mmt,ID,IDx,Node), not nodex(mmt,ID,IDx,Node2), is_a_non_bijective_relation(Node,Node2), node(MMS,ID,IDx,Node3), is_a_non_bijective_relation_with(Node,Node2,Node3), Node2!=Node, MMS!=mmt.							    

:- edgex(mmt, IDe, IDex, Edge, IDs, IDsx, IDt1, IDtx1), 
   edgex(mmt, IDe, IDex, Edge, IDs, IDsx, IDt2, IDtx2), IDt1!=IDt2.
:- edgex(mmt, IDe, IDex, Edge1, IDs1, IDsx1, IDt, IDtx), 
   edgex(mmt, IDe, IDex, Edge2, IDs2, IDsx2, IDt, IDtx), IDs1!=IDs2.
:- mapping_edge(mmt, IDe, IDex, Edge, IDS, IDSx, IDT, IDTx),  
not edgex_mapped(mmt, IDe, IDex).
edgex_mapped(mmt, IDe, IDex) :- edgex(mmt, IDe, IDex, Edge, IDS, IDSx, IDT, IDTx).

%%%%%%%%% Element Generation by Traces %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
              
              
mapping_node(MM,IDx,ID,Node):- trace_node(MM,IDx,ID,Node),MM=mmt.
%:- nodex(MM,IDx,ID,Node2), trace_node(MM,IDx,ID,Node), Node != Node2.
 
mapping_prop(MM,IDx,ID,IDmcx,IDmc,Prop,Value):- trace_prop(MM,IDx,ID,IDmcx,IDmc,Prop,Value),
                                         % prop(MM,IDx,ID,IDmcx,IDmc,Prop,Value), 
										%nodex(MM,IDmcx,IDmc,MCS),%node(MM,IDmcx,IDmc,MCS),
                                         MM=mmt.

mapping_edge(MM,IDx,ID,Edge,IDNodeSourcex,IDNodeSource,IDNodeTargetx,IDNodeTarget):-  
					trace_edge(MM,IDx,ID,Edge,IDNodeSourcex,IDNodeSource,IDNodeTargetx,IDNodeTarget), 
					%edge(MM,IDx,ID,Edge,IDNodeSourcex,IDNodeSource,IDNodeTargetx,IDNodeTarget), 
                     %%nodex(MM,IDNodeSourcex,IDNodeSource,NodeSource), nodex(MM,IDNodeTargetx,IDNodeTarget,NodeTarget),
                     %node(MM,IDNodeSourcex,IDNodeSource,NodeSource), node(MM,IDNodeTargetx,IDNodeTarget,NodeTarget), 
                     MM=mmt.    
                     
 :- not nodex(MM,IDx,ID,Node), trace_node(MM,IDx,ID,Node).
 :- not propx(MM,IDx,ID,IDmcx,IDmc,Prop,Value), trace_prop(MM,IDx,ID,IDmcx,IDmc,Prop,Value).
 :- not edgex(MM,IDx,ID,Edge,IDNodeSourcex,IDNodeSource,IDNodeTargetx,IDNodeTarget), trace_edge(MM,IDx,ID,Edge,IDNodeSourcex,IDNodeSource,IDNodeTargetx,IDNodeTarget).
 
%nodex(MM,IDx,ID,Node) :- trace_nb_node(MM,IDx,ID,Node),MM=mmt.
%propx(MM,IDx,ID,IDmcx,IDmc,Prop,Value) :-  trace_nb_prop(MM,IDx,ID,IDmcx,IDmc,Prop,Value),MM=mmt.
%edgex(MM,IDx,ID,Edge,IDNodeSourcex,IDNodeSource,IDNodeTargetx,IDNodeTarget) :- trace_nb_edge(MM,IDx,ID,Edge,IDNodeSourcex,IDNodeSource,IDNodeTargetx,IDNodeTarget), MM=mmt.
 
 :- nodex(MM,IDx,ID,Node2), trace_nb_node(MM,IDx,ID,Node), Node != Node2.
 :- edgex(MM,IDx,ID,Edge2,IDS,IDSx,IDT,IDTx), trace_nb_edge(MMS,IDx,ID,Edge,IDS2,IDS2x,IDT2,IDT2x), Edge!=Edge2.
 :- edgex(MM,IDx,ID,Edge,IDS,IDSx,IDT,IDTx), trace_nb_edge(MMS,IDx,ID,Edge,IDS2,IDS2x,IDT,IDTx), IDS!=IDS2.
 

 %:- not nodex(MM,IDx,ID,Node), trace_nb_node(MM,IDx,ID,Node).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%









