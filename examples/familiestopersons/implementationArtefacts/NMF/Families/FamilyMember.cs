//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2017.FamiliesToPersons.NMF.Families
{
    
    
    /// <summary>
    /// The default implementation of the FamilyMember class
    /// </summary>
    [XmlIdentifierAttribute("name")]
    [XmlNamespaceAttribute("platform:/plugin/Families/model/Families.ecore")]
    [XmlNamespacePrefixAttribute("Families")]
    [ModelRepresentationClassAttribute("platform:/plugin/Families/model/Families.ecore#//FamilyMember")]
    [DebuggerDisplayAttribute("FamilyMember {Name}")]
    public partial class FamilyMember : ModelElement, IFamilyMember, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        private string _name;
        
        private static Lazy<ITypedElement> _nameAttribute = new Lazy<ITypedElement>(RetrieveNameAttribute);
        
        private static Lazy<ITypedElement> _fatherInverseReference = new Lazy<ITypedElement>(RetrieveFatherInverseReference);
        
        /// <summary>
        /// The backing field for the FatherInverse property
        /// </summary>
        private IFamily _fatherInverse;
        
        private static Lazy<ITypedElement> _motherInverseReference = new Lazy<ITypedElement>(RetrieveMotherInverseReference);
        
        /// <summary>
        /// The backing field for the MotherInverse property
        /// </summary>
        private IFamily _motherInverse;
        
        private static Lazy<ITypedElement> _sonsInverseReference = new Lazy<ITypedElement>(RetrieveSonsInverseReference);
        
        /// <summary>
        /// The backing field for the SonsInverse property
        /// </summary>
        private IFamily _sonsInverse;
        
        private static Lazy<ITypedElement> _daughtersInverseReference = new Lazy<ITypedElement>(RetrieveDaughtersInverseReference);
        
        /// <summary>
        /// The backing field for the DaughtersInverse property
        /// </summary>
        private IFamily _daughtersInverse;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The name property
        /// </summary>
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e, _nameAttribute);
                    this._name = value;
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e, _nameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The fatherInverse property
        /// </summary>
        [XmlElementNameAttribute("fatherInverse")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("father")]
        public IFamily FatherInverse
        {
            get
            {
                return this._fatherInverse;
            }
            set
            {
                if ((this._fatherInverse != value))
                {
                    IFamily old = this._fatherInverse;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFatherInverseChanging(e);
                    this.OnPropertyChanging("FatherInverse", e, _fatherInverseReference);
                    this._fatherInverse = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.Father = null;
                        old.Deleted -= this.OnResetFatherInverse;
                    }
                    if ((value != null))
                    {
                        value.Father = this;
                        value.Deleted += this.OnResetFatherInverse;
                    }
                    this.OnFatherInverseChanged(e);
                    this.OnPropertyChanged("FatherInverse", e, _fatherInverseReference);
                }
            }
        }
        
        /// <summary>
        /// The motherInverse property
        /// </summary>
        [XmlElementNameAttribute("motherInverse")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("mother")]
        public IFamily MotherInverse
        {
            get
            {
                return this._motherInverse;
            }
            set
            {
                if ((this._motherInverse != value))
                {
                    IFamily old = this._motherInverse;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMotherInverseChanging(e);
                    this.OnPropertyChanging("MotherInverse", e, _motherInverseReference);
                    this._motherInverse = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.Mother = null;
                        old.Deleted -= this.OnResetMotherInverse;
                    }
                    if ((value != null))
                    {
                        value.Mother = this;
                        value.Deleted += this.OnResetMotherInverse;
                    }
                    this.OnMotherInverseChanged(e);
                    this.OnPropertyChanged("MotherInverse", e, _motherInverseReference);
                }
            }
        }
        
        /// <summary>
        /// The sonsInverse property
        /// </summary>
        [XmlElementNameAttribute("sonsInverse")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("sons")]
        public IFamily SonsInverse
        {
            get
            {
                return this._sonsInverse;
            }
            set
            {
                if ((this._sonsInverse != value))
                {
                    IFamily old = this._sonsInverse;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSonsInverseChanging(e);
                    this.OnPropertyChanging("SonsInverse", e, _sonsInverseReference);
                    this._sonsInverse = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.Sons.Remove(this);
                        old.Deleted -= this.OnResetSonsInverse;
                    }
                    if ((value != null))
                    {
                        value.Sons.Add(this);
                        value.Deleted += this.OnResetSonsInverse;
                    }
                    this.OnSonsInverseChanged(e);
                    this.OnPropertyChanged("SonsInverse", e, _sonsInverseReference);
                }
            }
        }
        
        /// <summary>
        /// The daughtersInverse property
        /// </summary>
        [XmlElementNameAttribute("daughtersInverse")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("daughters")]
        public IFamily DaughtersInverse
        {
            get
            {
                return this._daughtersInverse;
            }
            set
            {
                if ((this._daughtersInverse != value))
                {
                    IFamily old = this._daughtersInverse;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDaughtersInverseChanging(e);
                    this.OnPropertyChanging("DaughtersInverse", e, _daughtersInverseReference);
                    this._daughtersInverse = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.Daughters.Remove(this);
                        old.Deleted -= this.OnResetDaughtersInverse;
                    }
                    if ((value != null))
                    {
                        value.Daughters.Add(this);
                        value.Deleted += this.OnResetDaughtersInverse;
                    }
                    this.OnDaughtersInverseChanged(e);
                    this.OnPropertyChanged("DaughtersInverse", e, _daughtersInverseReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new FamilyMemberReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("platform:/plugin/Families/model/Families.ecore#//FamilyMember")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the FatherInverse property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FatherInverseChanging;
        
        /// <summary>
        /// Gets fired when the FatherInverse property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FatherInverseChanged;
        
        /// <summary>
        /// Gets fired before the MotherInverse property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MotherInverseChanging;
        
        /// <summary>
        /// Gets fired when the MotherInverse property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MotherInverseChanged;
        
        /// <summary>
        /// Gets fired before the SonsInverse property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SonsInverseChanging;
        
        /// <summary>
        /// Gets fired when the SonsInverse property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SonsInverseChanged;
        
        /// <summary>
        /// Gets fired before the DaughtersInverse property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DaughtersInverseChanging;
        
        /// <summary>
        /// Gets fired when the DaughtersInverse property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DaughtersInverseChanged;
        
        private static ITypedElement RetrieveNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.FamiliesToPersons.NMF.Families.FamilyMember.ClassInstance)).Resolve("name")));
        }
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFatherInverseReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.FamiliesToPersons.NMF.Families.FamilyMember.ClassInstance)).Resolve("fatherInverse")));
        }
        
        /// <summary>
        /// Raises the FatherInverseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFatherInverseChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FatherInverseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FatherInverseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFatherInverseChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FatherInverseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the FatherInverse property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFatherInverse(object sender, System.EventArgs eventArgs)
        {
            this.FatherInverse = null;
        }
        
        private static ITypedElement RetrieveMotherInverseReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.FamiliesToPersons.NMF.Families.FamilyMember.ClassInstance)).Resolve("motherInverse")));
        }
        
        /// <summary>
        /// Raises the MotherInverseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMotherInverseChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MotherInverseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MotherInverseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMotherInverseChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MotherInverseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MotherInverse property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMotherInverse(object sender, System.EventArgs eventArgs)
        {
            this.MotherInverse = null;
        }
        
        private static ITypedElement RetrieveSonsInverseReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.FamiliesToPersons.NMF.Families.FamilyMember.ClassInstance)).Resolve("sonsInverse")));
        }
        
        /// <summary>
        /// Raises the SonsInverseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSonsInverseChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SonsInverseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SonsInverseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSonsInverseChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SonsInverseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SonsInverse property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSonsInverse(object sender, System.EventArgs eventArgs)
        {
            this.SonsInverse = null;
        }
        
        private static ITypedElement RetrieveDaughtersInverseReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.FamiliesToPersons.NMF.Families.FamilyMember.ClassInstance)).Resolve("daughtersInverse")));
        }
        
        /// <summary>
        /// Raises the DaughtersInverseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDaughtersInverseChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DaughtersInverseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DaughtersInverseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDaughtersInverseChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DaughtersInverseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DaughtersInverse property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDaughtersInverse(object sender, System.EventArgs eventArgs)
        {
            this.DaughtersInverse = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "FATHERINVERSE"))
            {
                this.FatherInverse = ((IFamily)(value));
                return;
            }
            if ((feature == "MOTHERINVERSE"))
            {
                this.MotherInverse = ((IFamily)(value));
                return;
            }
            if ((feature == "SONSINVERSE"))
            {
                this.SonsInverse = ((IFamily)(value));
                return;
            }
            if ((feature == "DAUGHTERSINVERSE"))
            {
                this.DaughtersInverse = ((IFamily)(value));
                return;
            }
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override global::NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "FatherInverse"))
            {
                return new FatherInverseProxy(this);
            }
            if ((attribute == "MotherInverse"))
            {
                return new MotherInverseProxy(this);
            }
            if ((attribute == "SonsInverse"))
            {
                return new SonsInverseProxy(this);
            }
            if ((attribute == "DaughtersInverse"))
            {
                return new DaughtersInverseProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override INotifyExpression<IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "FatherInverse"))
            {
                return new FatherInverseProxy(this);
            }
            if ((reference == "MotherInverse"))
            {
                return new MotherInverseProxy(this);
            }
            if ((reference == "SonsInverse"))
            {
                return new SonsInverseProxy(this);
            }
            if ((reference == "DaughtersInverse"))
            {
                return new DaughtersInverseProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("platform:/plugin/Families/model/Families.ecore#//FamilyMember")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Name == null))
            {
                return null;
            }
            return this.Name.ToString();
        }
        
        /// <summary>
        /// The collection class to to represent the children of the FamilyMember class
        /// </summary>
        public class FamilyMemberReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private FamilyMember _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public FamilyMemberReferencedElementsCollection(FamilyMember parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.FatherInverse != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MotherInverse != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SonsInverse != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DaughtersInverse != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.FatherInverseChanged += this.PropagateValueChanges;
                this._parent.MotherInverseChanged += this.PropagateValueChanges;
                this._parent.SonsInverseChanged += this.PropagateValueChanges;
                this._parent.DaughtersInverseChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.FatherInverseChanged -= this.PropagateValueChanges;
                this._parent.MotherInverseChanged -= this.PropagateValueChanges;
                this._parent.SonsInverseChanged -= this.PropagateValueChanges;
                this._parent.DaughtersInverseChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.FatherInverse == null))
                {
                    IFamily fatherInverseCasted = item.As<IFamily>();
                    if ((fatherInverseCasted != null))
                    {
                        this._parent.FatherInverse = fatherInverseCasted;
                        return;
                    }
                }
                if ((this._parent.MotherInverse == null))
                {
                    IFamily motherInverseCasted = item.As<IFamily>();
                    if ((motherInverseCasted != null))
                    {
                        this._parent.MotherInverse = motherInverseCasted;
                        return;
                    }
                }
                if ((this._parent.SonsInverse == null))
                {
                    IFamily sonsInverseCasted = item.As<IFamily>();
                    if ((sonsInverseCasted != null))
                    {
                        this._parent.SonsInverse = sonsInverseCasted;
                        return;
                    }
                }
                if ((this._parent.DaughtersInverse == null))
                {
                    IFamily daughtersInverseCasted = item.As<IFamily>();
                    if ((daughtersInverseCasted != null))
                    {
                        this._parent.DaughtersInverse = daughtersInverseCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.FatherInverse = null;
                this._parent.MotherInverse = null;
                this._parent.SonsInverse = null;
                this._parent.DaughtersInverse = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.FatherInverse))
                {
                    return true;
                }
                if ((item == this._parent.MotherInverse))
                {
                    return true;
                }
                if ((item == this._parent.SonsInverse))
                {
                    return true;
                }
                if ((item == this._parent.DaughtersInverse))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.FatherInverse != null))
                {
                    array[arrayIndex] = this._parent.FatherInverse;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MotherInverse != null))
                {
                    array[arrayIndex] = this._parent.MotherInverse;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SonsInverse != null))
                {
                    array[arrayIndex] = this._parent.SonsInverse;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DaughtersInverse != null))
                {
                    array[arrayIndex] = this._parent.DaughtersInverse;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.FatherInverse == item))
                {
                    this._parent.FatherInverse = null;
                    return true;
                }
                if ((this._parent.MotherInverse == item))
                {
                    this._parent.MotherInverse = null;
                    return true;
                }
                if ((this._parent.SonsInverse == item))
                {
                    this._parent.SonsInverse = null;
                    return true;
                }
                if ((this._parent.DaughtersInverse == item))
                {
                    this._parent.DaughtersInverse = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.FatherInverse).Concat(this._parent.MotherInverse).Concat(this._parent.SonsInverse).Concat(this._parent.DaughtersInverse).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<IFamilyMember, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(IFamilyMember modelElement) : 
                    base(modelElement, "name")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fatherInverse property
        /// </summary>
        private sealed class FatherInverseProxy : ModelPropertyChange<IFamilyMember, IFamily>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FatherInverseProxy(IFamilyMember modelElement) : 
                    base(modelElement, "fatherInverse")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IFamily Value
            {
                get
                {
                    return this.ModelElement.FatherInverse;
                }
                set
                {
                    this.ModelElement.FatherInverse = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the motherInverse property
        /// </summary>
        private sealed class MotherInverseProxy : ModelPropertyChange<IFamilyMember, IFamily>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MotherInverseProxy(IFamilyMember modelElement) : 
                    base(modelElement, "motherInverse")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IFamily Value
            {
                get
                {
                    return this.ModelElement.MotherInverse;
                }
                set
                {
                    this.ModelElement.MotherInverse = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sonsInverse property
        /// </summary>
        private sealed class SonsInverseProxy : ModelPropertyChange<IFamilyMember, IFamily>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SonsInverseProxy(IFamilyMember modelElement) : 
                    base(modelElement, "sonsInverse")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IFamily Value
            {
                get
                {
                    return this.ModelElement.SonsInverse;
                }
                set
                {
                    this.ModelElement.SonsInverse = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the daughtersInverse property
        /// </summary>
        private sealed class DaughtersInverseProxy : ModelPropertyChange<IFamilyMember, IFamily>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DaughtersInverseProxy(IFamilyMember modelElement) : 
                    base(modelElement, "daughtersInverse")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IFamily Value
            {
                get
                {
                    return this.ModelElement.DaughtersInverse;
                }
                set
                {
                    this.ModelElement.DaughtersInverse = value;
                }
            }
        }
    }
}

