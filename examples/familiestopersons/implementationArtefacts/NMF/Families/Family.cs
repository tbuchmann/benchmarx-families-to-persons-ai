//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2017.FamiliesToPersons.NMF.Families
{
    
    
    /// <summary>
    /// The default implementation of the Family class
    /// </summary>
    [XmlIdentifierAttribute("name")]
    [XmlNamespaceAttribute("platform:/plugin/Families/model/Families.ecore")]
    [XmlNamespacePrefixAttribute("Families")]
    [ModelRepresentationClassAttribute("platform:/plugin/Families/model/Families.ecore#//Family")]
    [DebuggerDisplayAttribute("Family {Name}")]
    public partial class Family : ModelElement, IFamily, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        private string _name;
        
        private static Lazy<ITypedElement> _nameAttribute = new Lazy<ITypedElement>(RetrieveNameAttribute);
        
        private static Lazy<ITypedElement> _fatherReference = new Lazy<ITypedElement>(RetrieveFatherReference);
        
        /// <summary>
        /// The backing field for the Father property
        /// </summary>
        private IFamilyMember _father;
        
        private static Lazy<ITypedElement> _motherReference = new Lazy<ITypedElement>(RetrieveMotherReference);
        
        /// <summary>
        /// The backing field for the Mother property
        /// </summary>
        private IFamilyMember _mother;
        
        private static Lazy<ITypedElement> _sonsReference = new Lazy<ITypedElement>(RetrieveSonsReference);
        
        /// <summary>
        /// The backing field for the Sons property
        /// </summary>
        private FamilySonsCollection _sons;
        
        private static Lazy<ITypedElement> _daughtersReference = new Lazy<ITypedElement>(RetrieveDaughtersReference);
        
        /// <summary>
        /// The backing field for the Daughters property
        /// </summary>
        private FamilyDaughtersCollection _daughters;
        
        private static Lazy<ITypedElement> _familiesInverseReference = new Lazy<ITypedElement>(RetrieveFamiliesInverseReference);
        
        private static IClass _classInstance;
        
        public Family()
        {
            this._sons = new FamilySonsCollection(this);
            this._sons.CollectionChanging += this.SonsCollectionChanging;
            this._sons.CollectionChanged += this.SonsCollectionChanged;
            this._daughters = new FamilyDaughtersCollection(this);
            this._daughters.CollectionChanging += this.DaughtersCollectionChanging;
            this._daughters.CollectionChanged += this.DaughtersCollectionChanged;
        }
        
        /// <summary>
        /// The name property
        /// </summary>
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e, _nameAttribute);
                    this._name = value;
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e, _nameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The father property
        /// </summary>
        [XmlElementNameAttribute("father")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("fatherInverse")]
        public IFamilyMember Father
        {
            get
            {
                return this._father;
            }
            set
            {
                if ((this._father != value))
                {
                    IFamilyMember old = this._father;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFatherChanging(e);
                    this.OnPropertyChanging("Father", e, _fatherReference);
                    this._father = value;
                    if ((old != null))
                    {
                        old.FatherInverse = null;
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetFather;
                    }
                    if ((value != null))
                    {
                        value.FatherInverse = this;
                        value.Parent = this;
                        value.ParentChanged += this.OnResetFather;
                    }
                    this.OnFatherChanged(e);
                    this.OnPropertyChanged("Father", e, _fatherReference);
                }
            }
        }
        
        /// <summary>
        /// The mother property
        /// </summary>
        [XmlElementNameAttribute("mother")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("motherInverse")]
        public IFamilyMember Mother
        {
            get
            {
                return this._mother;
            }
            set
            {
                if ((this._mother != value))
                {
                    IFamilyMember old = this._mother;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMotherChanging(e);
                    this.OnPropertyChanging("Mother", e, _motherReference);
                    this._mother = value;
                    if ((old != null))
                    {
                        old.MotherInverse = null;
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetMother;
                    }
                    if ((value != null))
                    {
                        value.MotherInverse = this;
                        value.Parent = this;
                        value.ParentChanged += this.OnResetMother;
                    }
                    this.OnMotherChanged(e);
                    this.OnPropertyChanged("Mother", e, _motherReference);
                }
            }
        }
        
        /// <summary>
        /// The sons property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("sons")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("sonsInverse")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IFamilyMember> Sons
        {
            get
            {
                return this._sons;
            }
        }
        
        /// <summary>
        /// The daughters property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("daughters")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("daughtersInverse")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IFamilyMember> Daughters
        {
            get
            {
                return this._daughters;
            }
        }
        
        /// <summary>
        /// The familiesInverse property
        /// </summary>
        [XmlElementNameAttribute("familiesInverse")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("families")]
        public IFamilyRegister FamiliesInverse
        {
            get
            {
                return ModelHelper.CastAs<IFamilyRegister>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new FamilyChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new FamilyReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("platform:/plugin/Families/model/Families.ecore#//Family")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the Father property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FatherChanging;
        
        /// <summary>
        /// Gets fired when the Father property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FatherChanged;
        
        /// <summary>
        /// Gets fired before the Mother property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MotherChanging;
        
        /// <summary>
        /// Gets fired when the Mother property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MotherChanged;
        
        /// <summary>
        /// Gets fired before the FamiliesInverse property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FamiliesInverseChanging;
        
        /// <summary>
        /// Gets fired when the FamiliesInverse property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FamiliesInverseChanged;
        
        private static ITypedElement RetrieveNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.FamiliesToPersons.NMF.Families.Family.ClassInstance)).Resolve("name")));
        }
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFatherReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.FamiliesToPersons.NMF.Families.Family.ClassInstance)).Resolve("father")));
        }
        
        /// <summary>
        /// Raises the FatherChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFatherChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FatherChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FatherChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFatherChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FatherChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Father property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFather(object sender, System.EventArgs eventArgs)
        {
            this.Father = null;
        }
        
        private static ITypedElement RetrieveMotherReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.FamiliesToPersons.NMF.Families.Family.ClassInstance)).Resolve("mother")));
        }
        
        /// <summary>
        /// Raises the MotherChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMotherChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MotherChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MotherChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMotherChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MotherChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Mother property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMother(object sender, System.EventArgs eventArgs)
        {
            this.Mother = null;
        }
        
        private static ITypedElement RetrieveSonsReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.FamiliesToPersons.NMF.Families.Family.ClassInstance)).Resolve("sons")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Sons property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SonsCollectionChanging(object sender, NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Sons", e, _sonsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Sons property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SonsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Sons", e, _sonsReference);
        }
        
        private static ITypedElement RetrieveDaughtersReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.FamiliesToPersons.NMF.Families.Family.ClassInstance)).Resolve("daughters")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Daughters property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DaughtersCollectionChanging(object sender, NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Daughters", e, _daughtersReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Daughters property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DaughtersCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Daughters", e, _daughtersReference);
        }
        
        private static ITypedElement RetrieveFamiliesInverseReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.FamiliesToPersons.NMF.Families.Family.ClassInstance)).Resolve("familiesInverse")));
        }
        
        /// <summary>
        /// Raises the FamiliesInverseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFamiliesInverseChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FamiliesInverseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IFamilyRegister oldFamiliesInverse = ModelHelper.CastAs<IFamilyRegister>(oldParent);
            IFamilyRegister newFamiliesInverse = ModelHelper.CastAs<IFamilyRegister>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldFamiliesInverse, newFamiliesInverse);
            this.OnFamiliesInverseChanging(e);
            this.OnPropertyChanging("FamiliesInverse", e, _familiesInverseReference);
        }
        
        /// <summary>
        /// Raises the FamiliesInverseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFamiliesInverseChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FamiliesInverseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IFamilyRegister oldFamiliesInverse = ModelHelper.CastAs<IFamilyRegister>(oldParent);
            IFamilyRegister newFamiliesInverse = ModelHelper.CastAs<IFamilyRegister>(newParent);
            if ((oldFamiliesInverse != null))
            {
                oldFamiliesInverse.Families.Remove(this);
            }
            if ((newFamiliesInverse != null))
            {
                newFamiliesInverse.Families.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldFamiliesInverse, newFamiliesInverse);
            this.OnFamiliesInverseChanged(e);
            this.OnPropertyChanged("FamiliesInverse", e, _familiesInverseReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.Father))
            {
                return ModelHelper.CreatePath("Father");
            }
            if ((element == this.Mother))
            {
                return ModelHelper.CreatePath("Mother");
            }
            int sonsIndex = ModelHelper.IndexOfReference(this.Sons, element);
            if ((sonsIndex != -1))
            {
                return ModelHelper.CreatePath("sons", sonsIndex);
            }
            int daughtersIndex = ModelHelper.IndexOfReference(this.Daughters, element);
            if ((daughtersIndex != -1))
            {
                return ModelHelper.CreatePath("daughters", daughtersIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "FATHER"))
            {
                return this.Father;
            }
            if ((reference == "MOTHER"))
            {
                return this.Mother;
            }
            if ((reference == "SONS"))
            {
                if ((index < this.Sons.Count))
                {
                    return this.Sons[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "DAUGHTERS"))
            {
                if ((index < this.Daughters.Count))
                {
                    return this.Daughters[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "SONS"))
            {
                return this._sons;
            }
            if ((feature == "DAUGHTERS"))
            {
                return this._daughters;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "FATHER"))
            {
                this.Father = ((IFamilyMember)(value));
                return;
            }
            if ((feature == "MOTHER"))
            {
                this.Mother = ((IFamilyMember)(value));
                return;
            }
            if ((feature == "FAMILIESINVERSE"))
            {
                this.FamiliesInverse = ((IFamilyRegister)(value));
                return;
            }
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Father"))
            {
                return new FatherProxy(this);
            }
            if ((attribute == "Mother"))
            {
                return new MotherProxy(this);
            }
            if ((attribute == "FamiliesInverse"))
            {
                return new FamiliesInverseProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override INotifyExpression<IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Father"))
            {
                return new FatherProxy(this);
            }
            if ((reference == "Mother"))
            {
                return new MotherProxy(this);
            }
            if ((reference == "FamiliesInverse"))
            {
                return new FamiliesInverseProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._sons))
            {
                return "sons";
            }
            if ((container == this._daughters))
            {
                return "daughters";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("platform:/plugin/Families/model/Families.ecore#//Family")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Name == null))
            {
                return null;
            }
            return this.Name.ToString();
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Family class
        /// </summary>
        public class FamilyChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Family _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public FamilyChildrenCollection(Family parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Father != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Mother != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Sons.Count);
                    count = (count + this._parent.Daughters.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.FatherChanged += this.PropagateValueChanges;
                this._parent.MotherChanged += this.PropagateValueChanges;
                this._parent.Sons.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Daughters.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.FatherChanged -= this.PropagateValueChanges;
                this._parent.MotherChanged -= this.PropagateValueChanges;
                this._parent.Sons.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Daughters.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Father == null))
                {
                    IFamilyMember fatherCasted = item.As<IFamilyMember>();
                    if ((fatherCasted != null))
                    {
                        this._parent.Father = fatherCasted;
                        return;
                    }
                }
                if ((this._parent.Mother == null))
                {
                    IFamilyMember motherCasted = item.As<IFamilyMember>();
                    if ((motherCasted != null))
                    {
                        this._parent.Mother = motherCasted;
                        return;
                    }
                }
                IFamilyMember sonsCasted = item.As<IFamilyMember>();
                if ((sonsCasted != null))
                {
                    this._parent.Sons.Add(sonsCasted);
                }
                IFamilyMember daughtersCasted = item.As<IFamilyMember>();
                if ((daughtersCasted != null))
                {
                    this._parent.Daughters.Add(daughtersCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Father = null;
                this._parent.Mother = null;
                this._parent.Sons.Clear();
                this._parent.Daughters.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Father))
                {
                    return true;
                }
                if ((item == this._parent.Mother))
                {
                    return true;
                }
                if (this._parent.Sons.Contains(item))
                {
                    return true;
                }
                if (this._parent.Daughters.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Father != null))
                {
                    array[arrayIndex] = this._parent.Father;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Mother != null))
                {
                    array[arrayIndex] = this._parent.Mother;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> sonsEnumerator = this._parent.Sons.GetEnumerator();
                try
                {
                    for (
                    ; sonsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = sonsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    sonsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> daughtersEnumerator = this._parent.Daughters.GetEnumerator();
                try
                {
                    for (
                    ; daughtersEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = daughtersEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    daughtersEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Father == item))
                {
                    this._parent.Father = null;
                    return true;
                }
                if ((this._parent.Mother == item))
                {
                    this._parent.Mother = null;
                    return true;
                }
                IFamilyMember familyMemberItem = item.As<IFamilyMember>();
                if (((familyMemberItem != null) 
                            && this._parent.Sons.Remove(familyMemberItem)))
                {
                    return true;
                }
                if (((familyMemberItem != null) 
                            && this._parent.Daughters.Remove(familyMemberItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Father).Concat(this._parent.Mother).Concat(this._parent.Sons).Concat(this._parent.Daughters).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Family class
        /// </summary>
        public class FamilyReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Family _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public FamilyReferencedElementsCollection(Family parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Father != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Mother != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Sons.Count);
                    count = (count + this._parent.Daughters.Count);
                    if ((this._parent.FamiliesInverse != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.FatherChanged += this.PropagateValueChanges;
                this._parent.MotherChanged += this.PropagateValueChanges;
                this._parent.Sons.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Daughters.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.FamiliesInverseChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.FatherChanged -= this.PropagateValueChanges;
                this._parent.MotherChanged -= this.PropagateValueChanges;
                this._parent.Sons.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Daughters.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.FamiliesInverseChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Father == null))
                {
                    IFamilyMember fatherCasted = item.As<IFamilyMember>();
                    if ((fatherCasted != null))
                    {
                        this._parent.Father = fatherCasted;
                        return;
                    }
                }
                if ((this._parent.Mother == null))
                {
                    IFamilyMember motherCasted = item.As<IFamilyMember>();
                    if ((motherCasted != null))
                    {
                        this._parent.Mother = motherCasted;
                        return;
                    }
                }
                IFamilyMember sonsCasted = item.As<IFamilyMember>();
                if ((sonsCasted != null))
                {
                    this._parent.Sons.Add(sonsCasted);
                }
                IFamilyMember daughtersCasted = item.As<IFamilyMember>();
                if ((daughtersCasted != null))
                {
                    this._parent.Daughters.Add(daughtersCasted);
                }
                if ((this._parent.FamiliesInverse == null))
                {
                    IFamilyRegister familiesInverseCasted = item.As<IFamilyRegister>();
                    if ((familiesInverseCasted != null))
                    {
                        this._parent.FamiliesInverse = familiesInverseCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Father = null;
                this._parent.Mother = null;
                this._parent.Sons.Clear();
                this._parent.Daughters.Clear();
                this._parent.FamiliesInverse = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Father))
                {
                    return true;
                }
                if ((item == this._parent.Mother))
                {
                    return true;
                }
                if (this._parent.Sons.Contains(item))
                {
                    return true;
                }
                if (this._parent.Daughters.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.FamiliesInverse))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Father != null))
                {
                    array[arrayIndex] = this._parent.Father;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Mother != null))
                {
                    array[arrayIndex] = this._parent.Mother;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> sonsEnumerator = this._parent.Sons.GetEnumerator();
                try
                {
                    for (
                    ; sonsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = sonsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    sonsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> daughtersEnumerator = this._parent.Daughters.GetEnumerator();
                try
                {
                    for (
                    ; daughtersEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = daughtersEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    daughtersEnumerator.Dispose();
                }
                if ((this._parent.FamiliesInverse != null))
                {
                    array[arrayIndex] = this._parent.FamiliesInverse;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Father == item))
                {
                    this._parent.Father = null;
                    return true;
                }
                if ((this._parent.Mother == item))
                {
                    this._parent.Mother = null;
                    return true;
                }
                IFamilyMember familyMemberItem = item.As<IFamilyMember>();
                if (((familyMemberItem != null) 
                            && this._parent.Sons.Remove(familyMemberItem)))
                {
                    return true;
                }
                if (((familyMemberItem != null) 
                            && this._parent.Daughters.Remove(familyMemberItem)))
                {
                    return true;
                }
                if ((this._parent.FamiliesInverse == item))
                {
                    this._parent.FamiliesInverse = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Father).Concat(this._parent.Mother).Concat(this._parent.Sons).Concat(this._parent.Daughters).Concat(this._parent.FamiliesInverse).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<IFamily, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(IFamily modelElement) : 
                    base(modelElement, "name")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the father property
        /// </summary>
        private sealed class FatherProxy : ModelPropertyChange<IFamily, IFamilyMember>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FatherProxy(IFamily modelElement) : 
                    base(modelElement, "father")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IFamilyMember Value
            {
                get
                {
                    return this.ModelElement.Father;
                }
                set
                {
                    this.ModelElement.Father = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the mother property
        /// </summary>
        private sealed class MotherProxy : ModelPropertyChange<IFamily, IFamilyMember>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MotherProxy(IFamily modelElement) : 
                    base(modelElement, "mother")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IFamilyMember Value
            {
                get
                {
                    return this.ModelElement.Mother;
                }
                set
                {
                    this.ModelElement.Mother = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the familiesInverse property
        /// </summary>
        private sealed class FamiliesInverseProxy : ModelPropertyChange<IFamily, IFamilyRegister>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FamiliesInverseProxy(IFamily modelElement) : 
                    base(modelElement, "familiesInverse")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IFamilyRegister Value
            {
                get
                {
                    return this.ModelElement.FamiliesInverse;
                }
                set
                {
                    this.ModelElement.FamiliesInverse = value;
                }
            }
        }
    }
}

