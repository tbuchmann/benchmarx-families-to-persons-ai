//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2017.FamiliesToPersons.NMF.Families
{
    
    
    /// <summary>
    /// The public interface for FamilyMember
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(FamilyMember))]
    [XmlDefaultImplementationTypeAttribute(typeof(FamilyMember))]
    public interface IFamilyMember : IModelElement
    {
        
        /// <summary>
        /// The name property
        /// </summary>
        string Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// The fatherInverse property
        /// </summary>
        IFamily FatherInverse
        {
            get;
            set;
        }
        
        /// <summary>
        /// The motherInverse property
        /// </summary>
        IFamily MotherInverse
        {
            get;
            set;
        }
        
        /// <summary>
        /// The sonsInverse property
        /// </summary>
        IFamily SonsInverse
        {
            get;
            set;
        }
        
        /// <summary>
        /// The daughtersInverse property
        /// </summary>
        IFamily DaughtersInverse
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the FatherInverse property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FatherInverseChanging;
        
        /// <summary>
        /// Gets fired when the FatherInverse property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FatherInverseChanged;
        
        /// <summary>
        /// Gets fired before the MotherInverse property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MotherInverseChanging;
        
        /// <summary>
        /// Gets fired when the MotherInverse property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MotherInverseChanged;
        
        /// <summary>
        /// Gets fired before the SonsInverse property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SonsInverseChanging;
        
        /// <summary>
        /// Gets fired when the SonsInverse property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SonsInverseChanged;
        
        /// <summary>
        /// Gets fired before the DaughtersInverse property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DaughtersInverseChanging;
        
        /// <summary>
        /// Gets fired when the DaughtersInverse property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DaughtersInverseChanged;
    }
}

